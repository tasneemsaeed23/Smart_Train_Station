
TRAIN_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002430  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002430  000024a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001adc  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009c7  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000049df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000068d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000077c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000086d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000895d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000912b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <main>
      7a:	0c 94 16 12 	jmp	0x242c	; 0x242c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad ee       	ldi	r26, 0xED	; 237
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d ee       	ldi	r24, 0xED	; 237
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <hlcd_sendData>:
/******************************************************************************************************************/
/*                                   Function                                                                                                */
/******************************************************************************************************************/

static void hlcd_sendData(u8_t au8_data)  /*0b11001100*/
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	/*setting RS pin to high for sending data*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RS_PIN, HIGH);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>

	/*setting RW pin to low for writing data/Cmd*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RW_PIN, LOW);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	60 e2       	ldi	r22, 0x20	; 32
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>

	/*Passing data over data pins*/
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D0_PIN, GET_BIT(au8_data, 0));
     b60:	8f 85       	ldd	r24, Y+15	; 0x0f
     b62:	98 2f       	mov	r25, r24
     b64:	91 70       	andi	r25, 0x01	; 1
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	49 2f       	mov	r20, r25
     b6c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D1_PIN, GET_BIT(au8_data, 1));
     b70:	8f 85       	ldd	r24, Y+15	; 0x0f
     b72:	86 95       	lsr	r24
     b74:	98 2f       	mov	r25, r24
     b76:	91 70       	andi	r25, 0x01	; 1
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	49 2f       	mov	r20, r25
     b7e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D2_PIN, GET_BIT(au8_data, 2));
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	86 95       	lsr	r24
     b86:	86 95       	lsr	r24
     b88:	98 2f       	mov	r25, r24
     b8a:	91 70       	andi	r25, 0x01	; 1
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	49 2f       	mov	r20, r25
     b92:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D3_PIN, GET_BIT(au8_data, 3));
     b96:	8f 85       	ldd	r24, Y+15	; 0x0f
     b98:	86 95       	lsr	r24
     b9a:	86 95       	lsr	r24
     b9c:	86 95       	lsr	r24
     b9e:	98 2f       	mov	r25, r24
     ba0:	91 70       	andi	r25, 0x01	; 1
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	68 e0       	ldi	r22, 0x08	; 8
     ba6:	49 2f       	mov	r20, r25
     ba8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D4_PIN, GET_BIT(au8_data, 4));
     bac:	8f 85       	ldd	r24, Y+15	; 0x0f
     bae:	82 95       	swap	r24
     bb0:	8f 70       	andi	r24, 0x0F	; 15
     bb2:	98 2f       	mov	r25, r24
     bb4:	91 70       	andi	r25, 0x01	; 1
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	60 e1       	ldi	r22, 0x10	; 16
     bba:	49 2f       	mov	r20, r25
     bbc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D5_PIN, GET_BIT(au8_data, 5));
     bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc2:	82 95       	swap	r24
     bc4:	86 95       	lsr	r24
     bc6:	87 70       	andi	r24, 0x07	; 7
     bc8:	98 2f       	mov	r25, r24
     bca:	91 70       	andi	r25, 0x01	; 1
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	60 e2       	ldi	r22, 0x20	; 32
     bd0:	49 2f       	mov	r20, r25
     bd2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D6_PIN, GET_BIT(au8_data, 6));
     bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bd8:	82 95       	swap	r24
     bda:	86 95       	lsr	r24
     bdc:	86 95       	lsr	r24
     bde:	83 70       	andi	r24, 0x03	; 3
     be0:	98 2f       	mov	r25, r24
     be2:	91 70       	andi	r25, 0x01	; 1
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	60 e4       	ldi	r22, 0x40	; 64
     be8:	49 2f       	mov	r20, r25
     bea:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(au8_data, 7));
     bee:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf0:	98 2f       	mov	r25, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	99 27       	eor	r25, r25
     bf6:	99 1f       	adc	r25, r25
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	60 e8       	ldi	r22, 0x80	; 128
     bfc:	49 2f       	mov	r20, r25
     bfe:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
    /*triggering data by enable signal*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, LOW);
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	60 e4       	ldi	r22, 0x40	; 64
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a8 e4       	ldi	r26, 0x48	; 72
     c12:	b2 e4       	ldi	r27, 0x42	; 66
     c14:	8b 87       	std	Y+11, r24	; 0x0b
     c16:	9c 87       	std	Y+12, r25	; 0x0c
     c18:	ad 87       	std	Y+13, r26	; 0x0d
     c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c20:	8d 85       	ldd	r24, Y+13	; 0x0d
     c22:	9e 85       	ldd	r25, Y+14	; 0x0e
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	4a ef       	ldi	r20, 0xFA	; 250
     c2a:	54 e4       	ldi	r21, 0x44	; 68
     c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	8f 83       	std	Y+7, r24	; 0x07
     c36:	98 87       	std	Y+8, r25	; 0x08
     c38:	a9 87       	std	Y+9, r26	; 0x09
     c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c3c:	6f 81       	ldd	r22, Y+7	; 0x07
     c3e:	78 85       	ldd	r23, Y+8	; 0x08
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e8       	ldi	r20, 0x80	; 128
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c50:	88 23       	and	r24, r24
     c52:	2c f4       	brge	.+10     	; 0xc5e <hlcd_sendData+0x128>
		__ticks = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9e 83       	std	Y+6, r25	; 0x06
     c5a:	8d 83       	std	Y+5, r24	; 0x05
     c5c:	3f c0       	rjmp	.+126    	; 0xcdc <hlcd_sendData+0x1a6>
	else if (__tmp > 65535)
     c5e:	6f 81       	ldd	r22, Y+7	; 0x07
     c60:	78 85       	ldd	r23, Y+8	; 0x08
     c62:	89 85       	ldd	r24, Y+9	; 0x09
     c64:	9a 85       	ldd	r25, Y+10	; 0x0a
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	3f ef       	ldi	r19, 0xFF	; 255
     c6a:	4f e7       	ldi	r20, 0x7F	; 127
     c6c:	57 e4       	ldi	r21, 0x47	; 71
     c6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c72:	18 16       	cp	r1, r24
     c74:	4c f5       	brge	.+82     	; 0xcc8 <hlcd_sendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c76:	6b 85       	ldd	r22, Y+11	; 0x0b
     c78:	7c 85       	ldd	r23, Y+12	; 0x0c
     c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e2       	ldi	r20, 0x20	; 32
     c84:	51 e4       	ldi	r21, 0x41	; 65
     c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <hlcd_sendData+0x188>
     ca0:	88 ec       	ldi	r24, 0xC8	; 200
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <hlcd_sendData+0x176>
     cb0:	9c 83       	std	Y+4, r25	; 0x04
     cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	9e 81       	ldd	r25, Y+6	; 0x06
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9e 83       	std	Y+6, r25	; 0x06
     cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	69 f7       	brne	.-38     	; 0xca0 <hlcd_sendData+0x16a>
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <hlcd_sendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	6f 81       	ldd	r22, Y+7	; 0x07
     cca:	78 85       	ldd	r23, Y+8	; 0x08
     ccc:	89 85       	ldd	r24, Y+9	; 0x09
     cce:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	9e 83       	std	Y+6, r25	; 0x06
     cda:	8d 83       	std	Y+5, r24	; 0x05
     cdc:	8d 81       	ldd	r24, Y+5	; 0x05
     cde:	9e 81       	ldd	r25, Y+6	; 0x06
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <hlcd_sendData+0x1b2>
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(50);
	 mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	60 e4       	ldi	r22, 0x40	; 64
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>


	/*return from this function*/
		return;
}
     cfa:	2f 96       	adiw	r28, 0x0f	; 15
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <hlcd_sendCmd>:

static void hlcd_sendCmd(u8_t au8_cmd)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	2f 97       	sbiw	r28, 0x0f	; 15
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	8f 87       	std	Y+15, r24	; 0x0f
	/*setting RS pin to high for sending data*/
			mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RS_PIN, LOW);
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	60 e1       	ldi	r22, 0x10	; 16
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>

			/*setting RW pin to low for writing data/cmd*/
			mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RW_PIN, LOW);
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	60 e2       	ldi	r22, 0x20	; 32
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>

			/*Passing data over data pins*/
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D0_PIN, GET_BIT(au8_cmd, 0));
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	98 2f       	mov	r25, r24
     d3a:	91 70       	andi	r25, 0x01	; 1
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	49 2f       	mov	r20, r25
     d42:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D1_PIN, GET_BIT(au8_cmd, 1));
     d46:	8f 85       	ldd	r24, Y+15	; 0x0f
     d48:	86 95       	lsr	r24
     d4a:	98 2f       	mov	r25, r24
     d4c:	91 70       	andi	r25, 0x01	; 1
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	62 e0       	ldi	r22, 0x02	; 2
     d52:	49 2f       	mov	r20, r25
     d54:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D2_PIN, GET_BIT(au8_cmd, 2));
     d58:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5a:	86 95       	lsr	r24
     d5c:	86 95       	lsr	r24
     d5e:	98 2f       	mov	r25, r24
     d60:	91 70       	andi	r25, 0x01	; 1
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	64 e0       	ldi	r22, 0x04	; 4
     d66:	49 2f       	mov	r20, r25
     d68:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D3_PIN, GET_BIT(au8_cmd, 3));
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	86 95       	lsr	r24
     d74:	98 2f       	mov	r25, r24
     d76:	91 70       	andi	r25, 0x01	; 1
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	68 e0       	ldi	r22, 0x08	; 8
     d7c:	49 2f       	mov	r20, r25
     d7e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D4_PIN, GET_BIT(au8_cmd, 4));
     d82:	8f 85       	ldd	r24, Y+15	; 0x0f
     d84:	82 95       	swap	r24
     d86:	8f 70       	andi	r24, 0x0F	; 15
     d88:	98 2f       	mov	r25, r24
     d8a:	91 70       	andi	r25, 0x01	; 1
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	60 e1       	ldi	r22, 0x10	; 16
     d90:	49 2f       	mov	r20, r25
     d92:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D5_PIN, GET_BIT(au8_cmd, 5));
     d96:	8f 85       	ldd	r24, Y+15	; 0x0f
     d98:	82 95       	swap	r24
     d9a:	86 95       	lsr	r24
     d9c:	87 70       	andi	r24, 0x07	; 7
     d9e:	98 2f       	mov	r25, r24
     da0:	91 70       	andi	r25, 0x01	; 1
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	60 e2       	ldi	r22, 0x20	; 32
     da6:	49 2f       	mov	r20, r25
     da8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D6_PIN, GET_BIT(au8_cmd, 6));
     dac:	8f 85       	ldd	r24, Y+15	; 0x0f
     dae:	82 95       	swap	r24
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	83 70       	andi	r24, 0x03	; 3
     db6:	98 2f       	mov	r25, r24
     db8:	91 70       	andi	r25, 0x01	; 1
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	60 e4       	ldi	r22, 0x40	; 64
     dbe:	49 2f       	mov	r20, r25
     dc0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
			mdio_setPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(au8_cmd, 7));
     dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc6:	98 2f       	mov	r25, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	99 27       	eor	r25, r25
     dcc:	99 1f       	adc	r25, r25
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	60 e8       	ldi	r22, 0x80	; 128
     dd2:	49 2f       	mov	r20, r25
     dd4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
            /*triggering data by enable signal*/
			mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, LOW);
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	60 e4       	ldi	r22, 0x40	; 64
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a8 e4       	ldi	r26, 0x48	; 72
     de8:	b2 e4       	ldi	r27, 0x42	; 66
     dea:	8b 87       	std	Y+11, r24	; 0x0b
     dec:	9c 87       	std	Y+12, r25	; 0x0c
     dee:	ad 87       	std	Y+13, r26	; 0x0d
     df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df2:	6b 85       	ldd	r22, Y+11	; 0x0b
     df4:	7c 85       	ldd	r23, Y+12	; 0x0c
     df6:	8d 85       	ldd	r24, Y+13	; 0x0d
     df8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a ef       	ldi	r20, 0xFA	; 250
     e00:	54 e4       	ldi	r21, 0x44	; 68
     e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	8f 83       	std	Y+7, r24	; 0x07
     e0c:	98 87       	std	Y+8, r25	; 0x08
     e0e:	a9 87       	std	Y+9, r26	; 0x09
     e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e12:	6f 81       	ldd	r22, Y+7	; 0x07
     e14:	78 85       	ldd	r23, Y+8	; 0x08
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e8       	ldi	r20, 0x80	; 128
     e20:	5f e3       	ldi	r21, 0x3F	; 63
     e22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e26:	88 23       	and	r24, r24
     e28:	2c f4       	brge	.+10     	; 0xe34 <hlcd_sendCmd+0x128>
		__ticks = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <hlcd_sendCmd+0x1a6>
	else if (__tmp > 65535)
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	4f e7       	ldi	r20, 0x7F	; 127
     e42:	57 e4       	ldi	r21, 0x47	; 71
     e44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e48:	18 16       	cp	r1, r24
     e4a:	4c f5       	brge	.+82     	; 0xe9e <hlcd_sendCmd+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <hlcd_sendCmd+0x188>
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c 83       	std	Y+4, r25	; 0x04
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <hlcd_sendCmd+0x176>
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <hlcd_sendCmd+0x16a>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <hlcd_sendCmd+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <hlcd_sendCmd+0x1b2>
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(50);
			 mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	60 e4       	ldi	r22, 0x40	; 64
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>


	/*return from this function*/
		return;
}
     ed0:	2f 96       	adiw	r28, 0x0f	; 15
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <hlcd_init>:


void hlcd_init(void)
{
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	c6 54       	subi	r28, 0x46	; 70
     ef0:	d0 40       	sbci	r29, 0x00	; 0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
	/*Setting control port pins to output*/
	mdio_setPinStatus(HLCD_CTRL_PORT, (HLCD_RS_PIN | HLCD_RW_PIN | HLCD_EN_PIN), OUTPUT);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	60 e7       	ldi	r22, 0x70	; 112
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	0e 94 4c 0a 	call	0x1498	; 0x1498 <mdio_setPinStatus>

	/*Setting data port pins to output*/
	mdio_setPinStatus(HLCD_DATA_PORT, (HLCD_D0_PIN | HLCD_D1_PIN | HLCD_D2_PIN | HLCD_D3_PIN |
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <mdio_setPinStatus>
                                       HLCD_D4_PIN | HLCD_D5_PIN | HLCD_D6_PIN | HLCD_D7_PIN ), OUTPUT);

	/*Setting enable pin to high*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	60 e4       	ldi	r22, 0x40	; 64
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <mdio_setPinValue>
     f1a:	fe 01       	movw	r30, r28
     f1c:	ed 5b       	subi	r30, 0xBD	; 189
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a8 e4       	ldi	r26, 0x48	; 72
     f26:	b2 e4       	ldi	r27, 0x42	; 66
     f28:	80 83       	st	Z, r24
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	a2 83       	std	Z+2, r26	; 0x02
     f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	8e 01       	movw	r16, r28
     f32:	01 5c       	subi	r16, 0xC1	; 193
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	fe 01       	movw	r30, r28
     f38:	ed 5b       	subi	r30, 0xBD	; 189
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	4a ef       	ldi	r20, 0xFA	; 250
     f4a:	54 e4       	ldi	r21, 0x44	; 68
     f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	f8 01       	movw	r30, r16
     f56:	80 83       	st	Z, r24
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	a2 83       	std	Z+2, r26	; 0x02
     f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5e:	fe 01       	movw	r30, r28
     f60:	ff 96       	adiw	r30, 0x3f	; 63
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e8       	ldi	r20, 0x80	; 128
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f76:	88 23       	and	r24, r24
     f78:	2c f4       	brge	.+10     	; 0xf84 <hlcd_init+0xa2>
		__ticks = 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9e af       	std	Y+62, r25	; 0x3e
     f80:	8d af       	std	Y+61, r24	; 0x3d
     f82:	46 c0       	rjmp	.+140    	; 0x1010 <hlcd_init+0x12e>
	else if (__tmp > 65535)
     f84:	fe 01       	movw	r30, r28
     f86:	ff 96       	adiw	r30, 0x3f	; 63
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	57 e4       	ldi	r21, 0x47	; 71
     f98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	64 f5       	brge	.+88     	; 0xff8 <hlcd_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa0:	fe 01       	movw	r30, r28
     fa2:	ed 5b       	subi	r30, 0xBD	; 189
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9e af       	std	Y+62, r25	; 0x3e
     fcc:	8d af       	std	Y+61, r24	; 0x3d
     fce:	0f c0       	rjmp	.+30     	; 0xfee <hlcd_init+0x10c>
     fd0:	88 ec       	ldi	r24, 0xC8	; 200
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c af       	std	Y+60, r25	; 0x3c
     fd6:	8b af       	std	Y+59, r24	; 0x3b
     fd8:	8b ad       	ldd	r24, Y+59	; 0x3b
     fda:	9c ad       	ldd	r25, Y+60	; 0x3c
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <hlcd_init+0xfa>
     fe0:	9c af       	std	Y+60, r25	; 0x3c
     fe2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	8d ad       	ldd	r24, Y+61	; 0x3d
     fe6:	9e ad       	ldd	r25, Y+62	; 0x3e
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9e af       	std	Y+62, r25	; 0x3e
     fec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	8d ad       	ldd	r24, Y+61	; 0x3d
     ff0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <hlcd_init+0xee>
     ff6:	16 c0       	rjmp	.+44     	; 0x1024 <hlcd_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	fe 01       	movw	r30, r28
     ffa:	ff 96       	adiw	r30, 0x3f	; 63
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9e af       	std	Y+62, r25	; 0x3e
    100e:	8d af       	std	Y+61, r24	; 0x3d
    1010:	8d ad       	ldd	r24, Y+61	; 0x3d
    1012:	9e ad       	ldd	r25, Y+62	; 0x3e
    1014:	9a af       	std	Y+58, r25	; 0x3a
    1016:	89 af       	std	Y+57, r24	; 0x39
    1018:	89 ad       	ldd	r24, Y+57	; 0x39
    101a:	9a ad       	ldd	r25, Y+58	; 0x3a
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <hlcd_init+0x13a>
    1020:	9a af       	std	Y+58, r25	; 0x3a
    1022:	89 af       	std	Y+57, r24	; 0x39

	/*waiting for VDD to reach 4.5V*/
		_delay_ms(50);

	/*Sending function set command*/
		hlcd_sendCmd(0x3C);
    1024:	8c e3       	ldi	r24, 0x3C	; 60
    1026:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e8       	ldi	r26, 0x80	; 128
    1030:	bf e3       	ldi	r27, 0x3F	; 63
    1032:	8d ab       	std	Y+53, r24	; 0x35
    1034:	9e ab       	std	Y+54, r25	; 0x36
    1036:	af ab       	std	Y+55, r26	; 0x37
    1038:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	6d a9       	ldd	r22, Y+53	; 0x35
    103c:	7e a9       	ldd	r23, Y+54	; 0x36
    103e:	8f a9       	ldd	r24, Y+55	; 0x37
    1040:	98 ad       	ldd	r25, Y+56	; 0x38
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	89 ab       	std	Y+49, r24	; 0x31
    1054:	9a ab       	std	Y+50, r25	; 0x32
    1056:	ab ab       	std	Y+51, r26	; 0x33
    1058:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    105a:	69 a9       	ldd	r22, Y+49	; 0x31
    105c:	7a a9       	ldd	r23, Y+50	; 0x32
    105e:	8b a9       	ldd	r24, Y+51	; 0x33
    1060:	9c a9       	ldd	r25, Y+52	; 0x34
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <hlcd_init+0x19a>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	98 ab       	std	Y+48, r25	; 0x30
    1078:	8f a7       	std	Y+47, r24	; 0x2f
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <hlcd_init+0x218>
	else if (__tmp > 65535)
    107c:	69 a9       	ldd	r22, Y+49	; 0x31
    107e:	7a a9       	ldd	r23, Y+50	; 0x32
    1080:	8b a9       	ldd	r24, Y+51	; 0x33
    1082:	9c a9       	ldd	r25, Y+52	; 0x34
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <hlcd_init+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	6d a9       	ldd	r22, Y+53	; 0x35
    1096:	7e a9       	ldd	r23, Y+54	; 0x36
    1098:	8f a9       	ldd	r24, Y+55	; 0x37
    109a:	98 ad       	ldd	r25, Y+56	; 0x38
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	98 ab       	std	Y+48, r25	; 0x30
    10ba:	8f a7       	std	Y+47, r24	; 0x2f
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <hlcd_init+0x1fa>
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9e a7       	std	Y+46, r25	; 0x2e
    10c4:	8d a7       	std	Y+45, r24	; 0x2d
    10c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    10c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <hlcd_init+0x1e8>
    10ce:	9e a7       	std	Y+46, r25	; 0x2e
    10d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d4:	98 a9       	ldd	r25, Y+48	; 0x30
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	98 ab       	std	Y+48, r25	; 0x30
    10da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10de:	98 a9       	ldd	r25, Y+48	; 0x30
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <hlcd_init+0x1dc>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <hlcd_init+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	69 a9       	ldd	r22, Y+49	; 0x31
    10e8:	7a a9       	ldd	r23, Y+50	; 0x32
    10ea:	8b a9       	ldd	r24, Y+51	; 0x33
    10ec:	9c a9       	ldd	r25, Y+52	; 0x34
    10ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	98 ab       	std	Y+48, r25	; 0x30
    10f8:	8f a7       	std	Y+47, r24	; 0x2f
    10fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fc:	98 a9       	ldd	r25, Y+48	; 0x30
    10fe:	9c a7       	std	Y+44, r25	; 0x2c
    1100:	8b a7       	std	Y+43, r24	; 0x2b
    1102:	8b a5       	ldd	r24, Y+43	; 0x2b
    1104:	9c a5       	ldd	r25, Y+44	; 0x2c
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <hlcd_init+0x224>
    110a:	9c a7       	std	Y+44, r25	; 0x2c
    110c:	8b a7       	std	Y+43, r24	; 0x2b

	/*Delaying for 1ms*/
		_delay_ms(1);

	/*Sending display on/off command*/
	   hlcd_sendCmd(0x0F);
    110e:	8f e0       	ldi	r24, 0x0F	; 15
    1110:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 e8       	ldi	r26, 0x80	; 128
    111a:	bf e3       	ldi	r27, 0x3F	; 63
    111c:	8f a3       	std	Y+39, r24	; 0x27
    111e:	98 a7       	std	Y+40, r25	; 0x28
    1120:	a9 a7       	std	Y+41, r26	; 0x29
    1122:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	6f a1       	ldd	r22, Y+39	; 0x27
    1126:	78 a5       	ldd	r23, Y+40	; 0x28
    1128:	89 a5       	ldd	r24, Y+41	; 0x29
    112a:	9a a5       	ldd	r25, Y+42	; 0x2a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a ef       	ldi	r20, 0xFA	; 250
    1132:	54 e4       	ldi	r21, 0x44	; 68
    1134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8b a3       	std	Y+35, r24	; 0x23
    113e:	9c a3       	std	Y+36, r25	; 0x24
    1140:	ad a3       	std	Y+37, r26	; 0x25
    1142:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <hlcd_init+0x284>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9a a3       	std	Y+34, r25	; 0x22
    1162:	89 a3       	std	Y+33, r24	; 0x21
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <hlcd_init+0x302>
	else if (__tmp > 65535)
    1166:	6b a1       	ldd	r22, Y+35	; 0x23
    1168:	7c a1       	ldd	r23, Y+36	; 0x24
    116a:	8d a1       	ldd	r24, Y+37	; 0x25
    116c:	9e a1       	ldd	r25, Y+38	; 0x26
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <hlcd_init+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	6f a1       	ldd	r22, Y+39	; 0x27
    1180:	78 a5       	ldd	r23, Y+40	; 0x28
    1182:	89 a5       	ldd	r24, Y+41	; 0x29
    1184:	9a a5       	ldd	r25, Y+42	; 0x2a
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9a a3       	std	Y+34, r25	; 0x22
    11a4:	89 a3       	std	Y+33, r24	; 0x21
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <hlcd_init+0x2e4>
    11a8:	88 ec       	ldi	r24, 0xC8	; 200
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	98 a3       	std	Y+32, r25	; 0x20
    11ae:	8f 8f       	std	Y+31, r24	; 0x1f
    11b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11b2:	98 a1       	ldd	r25, Y+32	; 0x20
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <hlcd_init+0x2d2>
    11b8:	98 a3       	std	Y+32, r25	; 0x20
    11ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	89 a1       	ldd	r24, Y+33	; 0x21
    11be:	9a a1       	ldd	r25, Y+34	; 0x22
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9a a3       	std	Y+34, r25	; 0x22
    11c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	89 a1       	ldd	r24, Y+33	; 0x21
    11c8:	9a a1       	ldd	r25, Y+34	; 0x22
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <hlcd_init+0x2c6>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <hlcd_init+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6b a1       	ldd	r22, Y+35	; 0x23
    11d2:	7c a1       	ldd	r23, Y+36	; 0x24
    11d4:	8d a1       	ldd	r24, Y+37	; 0x25
    11d6:	9e a1       	ldd	r25, Y+38	; 0x26
    11d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9a a3       	std	Y+34, r25	; 0x22
    11e2:	89 a3       	std	Y+33, r24	; 0x21
    11e4:	89 a1       	ldd	r24, Y+33	; 0x21
    11e6:	9a a1       	ldd	r25, Y+34	; 0x22
    11e8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ea:	8d 8f       	std	Y+29, r24	; 0x1d
    11ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <hlcd_init+0x30e>
    11f4:	9e 8f       	std	Y+30, r25	; 0x1e
    11f6:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Delaying for 1ms*/
		_delay_ms(1);

	/*Sending display clear command*/
		hlcd_sendCmd(0x01);
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e4       	ldi	r27, 0x40	; 64
    1206:	89 8f       	std	Y+25, r24	; 0x19
    1208:	9a 8f       	std	Y+26, r25	; 0x1a
    120a:	ab 8f       	std	Y+27, r26	; 0x1b
    120c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	69 8d       	ldd	r22, Y+25	; 0x19
    1210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a ef       	ldi	r20, 0xFA	; 250
    121c:	54 e4       	ldi	r21, 0x44	; 68
    121e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8d 8b       	std	Y+21, r24	; 0x15
    1228:	9e 8b       	std	Y+22, r25	; 0x16
    122a:	af 8b       	std	Y+23, r26	; 0x17
    122c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    122e:	6d 89       	ldd	r22, Y+21	; 0x15
    1230:	7e 89       	ldd	r23, Y+22	; 0x16
    1232:	8f 89       	ldd	r24, Y+23	; 0x17
    1234:	98 8d       	ldd	r25, Y+24	; 0x18
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <hlcd_init+0x36e>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9c 8b       	std	Y+20, r25	; 0x14
    124c:	8b 8b       	std	Y+19, r24	; 0x13
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <hlcd_init+0x3ec>
	else if (__tmp > 65535)
    1250:	6d 89       	ldd	r22, Y+21	; 0x15
    1252:	7e 89       	ldd	r23, Y+22	; 0x16
    1254:	8f 89       	ldd	r24, Y+23	; 0x17
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <hlcd_init+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	69 8d       	ldd	r22, Y+25	; 0x19
    126a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9c 8b       	std	Y+20, r25	; 0x14
    128e:	8b 8b       	std	Y+19, r24	; 0x13
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <hlcd_init+0x3ce>
    1292:	88 ec       	ldi	r24, 0xC8	; 200
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9a 8b       	std	Y+18, r25	; 0x12
    1298:	89 8b       	std	Y+17, r24	; 0x11
    129a:	89 89       	ldd	r24, Y+17	; 0x11
    129c:	9a 89       	ldd	r25, Y+18	; 0x12
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <hlcd_init+0x3bc>
    12a2:	9a 8b       	std	Y+18, r25	; 0x12
    12a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	8b 89       	ldd	r24, Y+19	; 0x13
    12a8:	9c 89       	ldd	r25, Y+20	; 0x14
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9c 8b       	std	Y+20, r25	; 0x14
    12ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	8b 89       	ldd	r24, Y+19	; 0x13
    12b2:	9c 89       	ldd	r25, Y+20	; 0x14
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <hlcd_init+0x3b0>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <hlcd_init+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	6d 89       	ldd	r22, Y+21	; 0x15
    12bc:	7e 89       	ldd	r23, Y+22	; 0x16
    12be:	8f 89       	ldd	r24, Y+23	; 0x17
    12c0:	98 8d       	ldd	r25, Y+24	; 0x18
    12c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9c 8b       	std	Y+20, r25	; 0x14
    12cc:	8b 8b       	std	Y+19, r24	; 0x13
    12ce:	8b 89       	ldd	r24, Y+19	; 0x13
    12d0:	9c 89       	ldd	r25, Y+20	; 0x14
    12d2:	98 8b       	std	Y+16, r25	; 0x10
    12d4:	8f 87       	std	Y+15, r24	; 0x0f
    12d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d8:	98 89       	ldd	r25, Y+16	; 0x10
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <hlcd_init+0x3f8>
    12de:	98 8b       	std	Y+16, r25	; 0x10
    12e0:	8f 87       	std	Y+15, r24	; 0x0f

	/*Delaying for 2ms*/
		_delay_ms(2);

	/*Sending display mode set command*/
		hlcd_sendCmd(0x06);
    12e2:	86 e0       	ldi	r24, 0x06	; 6
    12e4:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 e8       	ldi	r26, 0x80	; 128
    12ee:	bf e3       	ldi	r27, 0x3F	; 63
    12f0:	8b 87       	std	Y+11, r24	; 0x0b
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	ad 87       	std	Y+13, r26	; 0x0d
    12f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a ef       	ldi	r20, 0xFA	; 250
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8f 83       	std	Y+7, r24	; 0x07
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	a9 87       	std	Y+9, r26	; 0x09
    1316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <hlcd_init+0x458>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <hlcd_init+0x4d6>
	else if (__tmp > 65535)
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <hlcd_init+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	0f c0       	rjmp	.+30     	; 0x139a <hlcd_init+0x4b8>
    137c:	88 ec       	ldi	r24, 0xC8	; 200
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <hlcd_init+0x4a6>
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <hlcd_init+0x49a>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <hlcd_init+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <hlcd_init+0x4e2>
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);


	/*return from this function*/
	return;
}
    13cc:	ca 5b       	subi	r28, 0xBA	; 186
    13ce:	df 4f       	sbci	r29, 0xFF	; 255
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret

000013e4 <hlcd_displayCharacter>:


void hlcd_displayCharacter(u8_t au8_charData)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
	hlcd_sendData(au8_charData);
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	0e 94 9b 05 	call	0xb36	; 0xb36 <hlcd_sendData>

	/*return from this function*/
		return;
}
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <hlcd_displayString>:


void hlcd_displayString(u8_t* pu8_strData)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <hlcd_displayString+0x6>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	0a c0       	rjmp	.+20     	; 0x1422 <hlcd_displayString+0x24>

   while(*pu8_strData != '\0')
   	   {
	       /*Sending character data*/
	           hlcd_sendData(*pu8_strData);
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	80 81       	ld	r24, Z
    1414:	0e 94 9b 05 	call	0xb36	; 0xb36 <hlcd_sendData>
	       /*Incrementing pointer address*/
	           pu8_strData++;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01


void hlcd_displayString(u8_t* pu8_strData)
{

   while(*pu8_strData != '\0')
    1422:	e9 81       	ldd	r30, Y+1	; 0x01
    1424:	fa 81       	ldd	r31, Y+2	; 0x02
    1426:	80 81       	ld	r24, Z
    1428:	88 23       	and	r24, r24
    142a:	89 f7       	brne	.-30     	; 0x140e <hlcd_displayString+0x10>

   	   }

	/*return from this function*/
		return;
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <hlcd_setCursor>:


void hlcd_setCursor(u8_t au8_row, u8_t au8_col)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <hlcd_setCursor+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <hlcd_setCursor+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
	/*Switching over LCD rows*/
	switch (au8_row)
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3c 83       	std	Y+4, r19	; 0x04
    144e:	2b 83       	std	Y+3, r18	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	31 f0       	breq	.+12     	; 0x1464 <hlcd_setCursor+0x2e>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	21 30       	cpi	r18, 0x01	; 1
    145e:	31 05       	cpc	r19, r1
    1460:	31 f0       	breq	.+12     	; 0x146e <hlcd_setCursor+0x38>
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <hlcd_setCursor+0x40>
	{
	/*in case of choosing row 0*/
		case ROW_0:
			/*sending set cursor command at line 1*/
			hlcd_sendCmd(( (0x80) | au8_col));
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 68       	ori	r24, 0x80	; 128
    1468:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <hlcd_setCursor+0x40>
		  break;

	/*in case of choosing row 1*/
		case ROW_1:
			/*sending set cursor command at line 2*/
						hlcd_sendCmd(( (0xC0) | au8_col));
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 6c       	ori	r24, 0xC0	; 192
    1472:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>

	}

	/*return from this function*/
		return;
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <hlcd_clear>:

/*this function used to clear LCD*/
void hlcd_clear(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	hlcd_sendCmd(0x01);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 86 06 	call	0xd0c	; 0xd0c <hlcd_sendCmd>
	/*return from this function*/
	return;
}
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <mdio_setPinStatus>:
/************************************************************************************************/
/*                                    Functions' definitions                                    */
/************************************************************************************************/

void mdio_setPinStatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	2d 97       	sbiw	r28, 0x0d	; 13
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02
    14b0:	4b 83       	std	Y+3, r20	; 0x03
	/*Switching over DIO Ports*/
	switch(au8_port)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3d 87       	std	Y+13, r19	; 0x0d
    14ba:	2c 87       	std	Y+12, r18	; 0x0c
    14bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    14be:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <mdio_setPinStatus+0x30>
    14c6:	54 c0       	rjmp	.+168    	; 0x1570 <mdio_setPinStatus+0xd8>
    14c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    14cc:	23 30       	cpi	r18, 0x03	; 3
    14ce:	31 05       	cpc	r19, r1
    14d0:	34 f4       	brge	.+12     	; 0x14de <mdio_setPinStatus+0x46>
    14d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	71 f0       	breq	.+28     	; 0x14f8 <mdio_setPinStatus+0x60>
    14dc:	fb c0       	rjmp	.+502    	; 0x16d4 <mdio_setPinStatus+0x23c>
    14de:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    14e2:	23 30       	cpi	r18, 0x03	; 3
    14e4:	31 05       	cpc	r19, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <mdio_setPinStatus+0x52>
    14e8:	7f c0       	rjmp	.+254    	; 0x15e8 <mdio_setPinStatus+0x150>
    14ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ee:	84 30       	cpi	r24, 0x04	; 4
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <mdio_setPinStatus+0x5e>
    14f4:	b5 c0       	rjmp	.+362    	; 0x1660 <mdio_setPinStatus+0x1c8>
    14f6:	ee c0       	rjmp	.+476    	; 0x16d4 <mdio_setPinStatus+0x23c>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Switching over pin status*/
			switch(au8_status)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3b 87       	std	Y+11, r19	; 0x0b
    1500:	2a 87       	std	Y+10, r18	; 0x0a
    1502:	8a 85       	ldd	r24, Y+10	; 0x0a
    1504:	9b 85       	ldd	r25, Y+11	; 0x0b
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	91 05       	cpc	r25, r1
    150a:	a1 f0       	breq	.+40     	; 0x1534 <mdio_setPinStatus+0x9c>
    150c:	2a 85       	ldd	r18, Y+10	; 0x0a
    150e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1510:	23 30       	cpi	r18, 0x03	; 3
    1512:	31 05       	cpc	r19, r1
    1514:	d1 f0       	breq	.+52     	; 0x154a <mdio_setPinStatus+0xb2>
    1516:	8a 85       	ldd	r24, Y+10	; 0x0a
    1518:	9b 85       	ldd	r25, Y+11	; 0x0b
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	09 f0       	breq	.+2      	; 0x1522 <mdio_setPinStatus+0x8a>
    1520:	d9 c0       	rjmp	.+434    	; 0x16d4 <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRA |= au8_pin;
    1522:	aa e3       	ldi	r26, 0x3A	; 58
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ea e3       	ldi	r30, 0x3A	; 58
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	90 81       	ld	r25, Z
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	89 2b       	or	r24, r25
    1530:	8c 93       	st	X, r24
    1532:	d0 c0       	rjmp	.+416    	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
    1534:	aa e3       	ldi	r26, 0x3A	; 58
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	98 2f       	mov	r25, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 95       	com	r24
    1544:	89 23       	and	r24, r25
    1546:	8c 93       	st	X, r24
    1548:	c5 c0       	rjmp	.+394    	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
    154a:	aa e3       	ldi	r26, 0x3A	; 58
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ea e3       	ldi	r30, 0x3A	; 58
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	98 2f       	mov	r25, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 95       	com	r24
    155a:	89 23       	and	r24, r25
    155c:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTA |= au8_pin;
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	90 81       	ld	r25, Z
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	89 2b       	or	r24, r25
    156c:	8c 93       	st	X, r24
    156e:	b2 c0       	rjmp	.+356    	; 0x16d4 <mdio_setPinStatus+0x23c>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Switching over pin status*/
			switch(au8_status)
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	39 87       	std	Y+9, r19	; 0x09
    1578:	28 87       	std	Y+8, r18	; 0x08
    157a:	88 85       	ldd	r24, Y+8	; 0x08
    157c:	99 85       	ldd	r25, Y+9	; 0x09
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	91 05       	cpc	r25, r1
    1582:	a1 f0       	breq	.+40     	; 0x15ac <mdio_setPinStatus+0x114>
    1584:	28 85       	ldd	r18, Y+8	; 0x08
    1586:	39 85       	ldd	r19, Y+9	; 0x09
    1588:	23 30       	cpi	r18, 0x03	; 3
    158a:	31 05       	cpc	r19, r1
    158c:	d1 f0       	breq	.+52     	; 0x15c2 <mdio_setPinStatus+0x12a>
    158e:	88 85       	ldd	r24, Y+8	; 0x08
    1590:	99 85       	ldd	r25, Y+9	; 0x09
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	09 f0       	breq	.+2      	; 0x159a <mdio_setPinStatus+0x102>
    1598:	9d c0       	rjmp	.+314    	; 0x16d4 <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRB |= au8_pin;
    159a:	a7 e3       	ldi	r26, 0x37	; 55
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e7 e3       	ldi	r30, 0x37	; 55
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	90 81       	ld	r25, Z
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	89 2b       	or	r24, r25
    15a8:	8c 93       	st	X, r24
    15aa:	94 c0       	rjmp	.+296    	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRB &= ~au8_pin;
    15ac:	a7 e3       	ldi	r26, 0x37	; 55
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e7 e3       	ldi	r30, 0x37	; 55
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	98 2f       	mov	r25, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	80 95       	com	r24
    15bc:	89 23       	and	r24, r25
    15be:	8c 93       	st	X, r24
    15c0:	89 c0       	rjmp	.+274    	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRB &= ~au8_pin;
    15c2:	a7 e3       	ldi	r26, 0x37	; 55
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 e3       	ldi	r30, 0x37	; 55
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	98 2f       	mov	r25, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 95       	com	r24
    15d2:	89 23       	and	r24, r25
    15d4:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTB |= au8_pin;
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	90 81       	ld	r25, Z
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	89 2b       	or	r24, r25
    15e4:	8c 93       	st	X, r24
    15e6:	76 c0       	rjmp	.+236    	; 0x16d4 <mdio_setPinStatus+0x23c>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Switching over pin status*/
			switch(au8_status)
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3f 83       	std	Y+7, r19	; 0x07
    15f0:	2e 83       	std	Y+6, r18	; 0x06
    15f2:	8e 81       	ldd	r24, Y+6	; 0x06
    15f4:	9f 81       	ldd	r25, Y+7	; 0x07
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	91 05       	cpc	r25, r1
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <mdio_setPinStatus+0x18c>
    15fc:	2e 81       	ldd	r18, Y+6	; 0x06
    15fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1600:	23 30       	cpi	r18, 0x03	; 3
    1602:	31 05       	cpc	r19, r1
    1604:	d1 f0       	breq	.+52     	; 0x163a <mdio_setPinStatus+0x1a2>
    1606:	8e 81       	ldd	r24, Y+6	; 0x06
    1608:	9f 81       	ldd	r25, Y+7	; 0x07
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	09 f0       	breq	.+2      	; 0x1612 <mdio_setPinStatus+0x17a>
    1610:	61 c0       	rjmp	.+194    	; 0x16d4 <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRC |= au8_pin;
    1612:	a4 e3       	ldi	r26, 0x34	; 52
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e4 e3       	ldi	r30, 0x34	; 52
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
    1622:	58 c0       	rjmp	.+176    	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRC &= ~au8_pin;
    1624:	a4 e3       	ldi	r26, 0x34	; 52
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e4 e3       	ldi	r30, 0x34	; 52
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	98 2f       	mov	r25, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	80 95       	com	r24
    1634:	89 23       	and	r24, r25
    1636:	8c 93       	st	X, r24
    1638:	4d c0       	rjmp	.+154    	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRC &= ~au8_pin;
    163a:	a4 e3       	ldi	r26, 0x34	; 52
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e4 e3       	ldi	r30, 0x34	; 52
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	98 2f       	mov	r25, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 95       	com	r24
    164a:	89 23       	and	r24, r25
    164c:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTC |= au8_pin;
    164e:	a5 e3       	ldi	r26, 0x35	; 53
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e3       	ldi	r30, 0x35	; 53
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	90 81       	ld	r25, Z
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	89 2b       	or	r24, r25
    165c:	8c 93       	st	X, r24
    165e:	3a c0       	rjmp	.+116    	; 0x16d4 <mdio_setPinStatus+0x23c>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Switching over pin status*/
			switch(au8_status)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3d 83       	std	Y+5, r19	; 0x05
    1668:	2c 83       	std	Y+4, r18	; 0x04
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	9d 81       	ldd	r25, Y+5	; 0x05
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	91 05       	cpc	r25, r1
    1672:	99 f0       	breq	.+38     	; 0x169a <mdio_setPinStatus+0x202>
    1674:	2c 81       	ldd	r18, Y+4	; 0x04
    1676:	3d 81       	ldd	r19, Y+5	; 0x05
    1678:	23 30       	cpi	r18, 0x03	; 3
    167a:	31 05       	cpc	r19, r1
    167c:	c9 f0       	breq	.+50     	; 0x16b0 <mdio_setPinStatus+0x218>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	31 f5       	brne	.+76     	; 0x16d4 <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRD |= au8_pin;
    1688:	a1 e3       	ldi	r26, 0x31	; 49
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e1 e3       	ldi	r30, 0x31	; 49
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	90 81       	ld	r25, Z
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	89 2b       	or	r24, r25
    1696:	8c 93       	st	X, r24
    1698:	1d c0       	rjmp	.+58     	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRD &= ~au8_pin;
    169a:	a1 e3       	ldi	r26, 0x31	; 49
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e1 e3       	ldi	r30, 0x31	; 49
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	98 2f       	mov	r25, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 95       	com	r24
    16aa:	89 23       	and	r24, r25
    16ac:	8c 93       	st	X, r24
    16ae:	12 c0       	rjmp	.+36     	; 0x16d4 <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRD &= ~au8_pin;
    16b0:	a1 e3       	ldi	r26, 0x31	; 49
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e1 e3       	ldi	r30, 0x31	; 49
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	98 2f       	mov	r25, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	80 95       	com	r24
    16c0:	89 23       	and	r24, r25
    16c2:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTD |= au8_pin;
    16c4:	a2 e3       	ldi	r26, 0x32	; 50
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e2 e3       	ldi	r30, 0x32	; 50
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	90 81       	ld	r25, Z
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	89 2b       	or	r24, r25
    16d2:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    16d4:	2d 96       	adiw	r28, 0x0d	; 13
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <mdio_setPinValue>:

void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_value)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	2d 97       	sbiw	r28, 0x0d	; 13
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	6a 83       	std	Y+2, r22	; 0x02
    16fe:	4b 83       	std	Y+3, r20	; 0x03
	/*Switching over DIO Ports*/
	switch(au8_port)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3d 87       	std	Y+13, r19	; 0x0d
    1708:	2c 87       	std	Y+12, r18	; 0x0c
    170a:	8c 85       	ldd	r24, Y+12	; 0x0c
    170c:	9d 85       	ldd	r25, Y+13	; 0x0d
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	91 05       	cpc	r25, r1
    1712:	d9 f1       	breq	.+118    	; 0x178a <mdio_setPinValue+0xa4>
    1714:	2c 85       	ldd	r18, Y+12	; 0x0c
    1716:	3d 85       	ldd	r19, Y+13	; 0x0d
    1718:	23 30       	cpi	r18, 0x03	; 3
    171a:	31 05       	cpc	r19, r1
    171c:	34 f4       	brge	.+12     	; 0x172a <mdio_setPinValue+0x44>
    171e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1720:	9d 85       	ldd	r25, Y+13	; 0x0d
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	71 f0       	breq	.+28     	; 0x1744 <mdio_setPinValue+0x5e>
    1728:	96 c0       	rjmp	.+300    	; 0x1856 <mdio_setPinValue+0x170>
    172a:	2c 85       	ldd	r18, Y+12	; 0x0c
    172c:	3d 85       	ldd	r19, Y+13	; 0x0d
    172e:	23 30       	cpi	r18, 0x03	; 3
    1730:	31 05       	cpc	r19, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <mdio_setPinValue+0x50>
    1734:	4d c0       	rjmp	.+154    	; 0x17d0 <mdio_setPinValue+0xea>
    1736:	8c 85       	ldd	r24, Y+12	; 0x0c
    1738:	9d 85       	ldd	r25, Y+13	; 0x0d
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <mdio_setPinValue+0x5c>
    1740:	69 c0       	rjmp	.+210    	; 0x1814 <mdio_setPinValue+0x12e>
    1742:	89 c0       	rjmp	.+274    	; 0x1856 <mdio_setPinValue+0x170>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Switching over pin value*/
			switch(au8_value)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3b 87       	std	Y+11, r19	; 0x0b
    174c:	2a 87       	std	Y+10, r18	; 0x0a
    174e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1750:	9b 85       	ldd	r25, Y+11	; 0x0b
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	79 f0       	breq	.+30     	; 0x1774 <mdio_setPinValue+0x8e>
    1756:	2a 85       	ldd	r18, Y+10	; 0x0a
    1758:	3b 85       	ldd	r19, Y+11	; 0x0b
    175a:	21 30       	cpi	r18, 0x01	; 1
    175c:	31 05       	cpc	r19, r1
    175e:	09 f0       	breq	.+2      	; 0x1762 <mdio_setPinValue+0x7c>
    1760:	7a c0       	rjmp	.+244    	; 0x1856 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTA |= au8_pin;
    1762:	ab e3       	ldi	r26, 0x3B	; 59
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	90 81       	ld	r25, Z
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	89 2b       	or	r24, r25
    1770:	8c 93       	st	X, r24
    1772:	71 c0       	rjmp	.+226    	; 0x1856 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTA &= ~au8_pin;
    1774:	ab e3       	ldi	r26, 0x3B	; 59
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	eb e3       	ldi	r30, 0x3B	; 59
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	98 2f       	mov	r25, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	80 95       	com	r24
    1784:	89 23       	and	r24, r25
    1786:	8c 93       	st	X, r24
    1788:	66 c0       	rjmp	.+204    	; 0x1856 <mdio_setPinValue+0x170>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Switching over pin value*/
			switch(au8_value)
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	39 87       	std	Y+9, r19	; 0x09
    1792:	28 87       	std	Y+8, r18	; 0x08
    1794:	88 85       	ldd	r24, Y+8	; 0x08
    1796:	99 85       	ldd	r25, Y+9	; 0x09
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	79 f0       	breq	.+30     	; 0x17ba <mdio_setPinValue+0xd4>
    179c:	28 85       	ldd	r18, Y+8	; 0x08
    179e:	39 85       	ldd	r19, Y+9	; 0x09
    17a0:	21 30       	cpi	r18, 0x01	; 1
    17a2:	31 05       	cpc	r19, r1
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <mdio_setPinValue+0xc2>
    17a6:	57 c0       	rjmp	.+174    	; 0x1856 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTB |= au8_pin;
    17a8:	a8 e3       	ldi	r26, 0x38	; 56
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	90 81       	ld	r25, Z
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	89 2b       	or	r24, r25
    17b6:	8c 93       	st	X, r24
    17b8:	4e c0       	rjmp	.+156    	; 0x1856 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTB &= ~au8_pin;
    17ba:	a8 e3       	ldi	r26, 0x38	; 56
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e3       	ldi	r30, 0x38	; 56
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	98 2f       	mov	r25, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	80 95       	com	r24
    17ca:	89 23       	and	r24, r25
    17cc:	8c 93       	st	X, r24
    17ce:	43 c0       	rjmp	.+134    	; 0x1856 <mdio_setPinValue+0x170>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Switching over pin value*/
			switch(au8_value)
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3f 83       	std	Y+7, r19	; 0x07
    17d8:	2e 83       	std	Y+6, r18	; 0x06
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	71 f0       	breq	.+28     	; 0x17fe <mdio_setPinValue+0x118>
    17e2:	2e 81       	ldd	r18, Y+6	; 0x06
    17e4:	3f 81       	ldd	r19, Y+7	; 0x07
    17e6:	21 30       	cpi	r18, 0x01	; 1
    17e8:	31 05       	cpc	r19, r1
    17ea:	a9 f5       	brne	.+106    	; 0x1856 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTC |= au8_pin;
    17ec:	a5 e3       	ldi	r26, 0x35	; 53
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	89 2b       	or	r24, r25
    17fa:	8c 93       	st	X, r24
    17fc:	2c c0       	rjmp	.+88     	; 0x1856 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTC &= ~au8_pin;
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	98 2f       	mov	r25, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 95       	com	r24
    180e:	89 23       	and	r24, r25
    1810:	8c 93       	st	X, r24
    1812:	21 c0       	rjmp	.+66     	; 0x1856 <mdio_setPinValue+0x170>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Switching over pin value*/
			switch(au8_value)
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3d 83       	std	Y+5, r19	; 0x05
    181c:	2c 83       	std	Y+4, r18	; 0x04
    181e:	8c 81       	ldd	r24, Y+4	; 0x04
    1820:	9d 81       	ldd	r25, Y+5	; 0x05
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	71 f0       	breq	.+28     	; 0x1842 <mdio_setPinValue+0x15c>
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	21 30       	cpi	r18, 0x01	; 1
    182c:	31 05       	cpc	r19, r1
    182e:	99 f4       	brne	.+38     	; 0x1856 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTD |= au8_pin;
    1830:	a2 e3       	ldi	r26, 0x32	; 50
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e2 e3       	ldi	r30, 0x32	; 50
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	90 81       	ld	r25, Z
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	89 2b       	or	r24, r25
    183e:	8c 93       	st	X, r24
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTD &= ~au8_pin;
    1842:	a2 e3       	ldi	r26, 0x32	; 50
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	98 2f       	mov	r25, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	80 95       	com	r24
    1852:	89 23       	and	r24, r25
    1854:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    1856:	2d 96       	adiw	r28, 0x0d	; 13
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <mdio_togglePinValue>:

void mdio_togglePinValue(u8_t au8_port, u8_t au8_pin)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <mdio_togglePinValue+0x6>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <mdio_togglePinValue+0x8>
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6a 83       	std	Y+2, r22	; 0x02
	/*Switching over DIO Ports*/
	switch(au8_port)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	3c 83       	std	Y+4, r19	; 0x04
    1880:	2b 83       	std	Y+3, r18	; 0x03
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	f9 f0       	breq	.+62     	; 0x18ca <mdio_togglePinValue+0x62>
    188c:	2b 81       	ldd	r18, Y+3	; 0x03
    188e:	3c 81       	ldd	r19, Y+4	; 0x04
    1890:	23 30       	cpi	r18, 0x03	; 3
    1892:	31 05       	cpc	r19, r1
    1894:	34 f4       	brge	.+12     	; 0x18a2 <mdio_togglePinValue+0x3a>
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	61 f0       	breq	.+24     	; 0x18b8 <mdio_togglePinValue+0x50>
    18a0:	2e c0       	rjmp	.+92     	; 0x18fe <mdio_togglePinValue+0x96>
    18a2:	2b 81       	ldd	r18, Y+3	; 0x03
    18a4:	3c 81       	ldd	r19, Y+4	; 0x04
    18a6:	23 30       	cpi	r18, 0x03	; 3
    18a8:	31 05       	cpc	r19, r1
    18aa:	c1 f0       	breq	.+48     	; 0x18dc <mdio_togglePinValue+0x74>
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	91 05       	cpc	r25, r1
    18b4:	e1 f0       	breq	.+56     	; 0x18ee <mdio_togglePinValue+0x86>
    18b6:	23 c0       	rjmp	.+70     	; 0x18fe <mdio_togglePinValue+0x96>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Toggling specific DIO pins*/
			MDIO_PORTA ^= au8_pin;
    18b8:	ab e3       	ldi	r26, 0x3B	; 59
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	eb e3       	ldi	r30, 0x3B	; 59
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	90 81       	ld	r25, Z
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	89 27       	eor	r24, r25
    18c6:	8c 93       	st	X, r24
    18c8:	1a c0       	rjmp	.+52     	; 0x18fe <mdio_togglePinValue+0x96>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Toggling specific DIO pins*/
			MDIO_PORTB ^= au8_pin;
    18ca:	a8 e3       	ldi	r26, 0x38	; 56
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e8 e3       	ldi	r30, 0x38	; 56
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	90 81       	ld	r25, Z
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	89 27       	eor	r24, r25
    18d8:	8c 93       	st	X, r24
    18da:	11 c0       	rjmp	.+34     	; 0x18fe <mdio_togglePinValue+0x96>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Toggling specific DIO pins*/
			MDIO_PORTC ^= au8_pin;
    18dc:	a5 e3       	ldi	r26, 0x35	; 53
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e3       	ldi	r30, 0x35	; 53
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	90 81       	ld	r25, Z
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	89 27       	eor	r24, r25
    18ea:	8c 93       	st	X, r24
    18ec:	08 c0       	rjmp	.+16     	; 0x18fe <mdio_togglePinValue+0x96>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Toggling specific DIO pins*/
			MDIO_PORTD ^= au8_pin;
    18ee:	a2 e3       	ldi	r26, 0x32	; 50
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e2 e3       	ldi	r30, 0x32	; 50
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	90 81       	ld	r25, Z
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	89 27       	eor	r24, r25
    18fc:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <mdio_getPinValue>:

u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <mdio_getPinValue+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <mdio_getPinValue+0x8>
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	8a 83       	std	Y+2, r24	; 0x02
    191c:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable used to get a specific pin value*/
	u8_t au8_pinValue = 0;
    191e:	19 82       	std	Y+1, r1	; 0x01

	/*Switching over DIO Ports*/
	switch(au8_port)
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3d 83       	std	Y+5, r19	; 0x05
    1928:	2c 83       	std	Y+4, r18	; 0x04
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	91 05       	cpc	r25, r1
    1932:	11 f1       	breq	.+68     	; 0x1978 <mdio_getPinValue+0x6c>
    1934:	2c 81       	ldd	r18, Y+4	; 0x04
    1936:	3d 81       	ldd	r19, Y+5	; 0x05
    1938:	23 30       	cpi	r18, 0x03	; 3
    193a:	31 05       	cpc	r19, r1
    193c:	34 f4       	brge	.+12     	; 0x194a <mdio_getPinValue+0x3e>
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9d 81       	ldd	r25, Y+5	; 0x05
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	61 f0       	breq	.+24     	; 0x1960 <mdio_getPinValue+0x54>
    1948:	3a c0       	rjmp	.+116    	; 0x19be <mdio_getPinValue+0xb2>
    194a:	2c 81       	ldd	r18, Y+4	; 0x04
    194c:	3d 81       	ldd	r19, Y+5	; 0x05
    194e:	23 30       	cpi	r18, 0x03	; 3
    1950:	31 05       	cpc	r19, r1
    1952:	f1 f0       	breq	.+60     	; 0x1990 <mdio_getPinValue+0x84>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	91 05       	cpc	r25, r1
    195c:	29 f1       	breq	.+74     	; 0x19a8 <mdio_getPinValue+0x9c>
    195e:	2f c0       	rjmp	.+94     	; 0x19be <mdio_getPinValue+0xb2>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Checking a specific pin value*/
			if(MDIO_PINA & au8_pin)
    1960:	e9 e3       	ldi	r30, 0x39	; 57
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	90 81       	ld	r25, Z
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	89 23       	and	r24, r25
    196a:	88 23       	and	r24, r24
    196c:	19 f0       	breq	.+6      	; 0x1974 <mdio_getPinValue+0x68>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	25 c0       	rjmp	.+74     	; 0x19be <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    1974:	19 82       	std	Y+1, r1	; 0x01
    1976:	23 c0       	rjmp	.+70     	; 0x19be <mdio_getPinValue+0xb2>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Checking a specific pin value*/
			if(MDIO_PINB & au8_pin)
    1978:	e6 e3       	ldi	r30, 0x36	; 54
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	90 81       	ld	r25, Z
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	89 23       	and	r24, r25
    1982:	88 23       	and	r24, r24
    1984:	19 f0       	breq	.+6      	; 0x198c <mdio_getPinValue+0x80>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	19 c0       	rjmp	.+50     	; 0x19be <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    198c:	19 82       	std	Y+1, r1	; 0x01
    198e:	17 c0       	rjmp	.+46     	; 0x19be <mdio_getPinValue+0xb2>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Checking a specific pin value*/
			if(MDIO_PINC & au8_pin)
    1990:	e3 e3       	ldi	r30, 0x33	; 51
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	90 81       	ld	r25, Z
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	89 23       	and	r24, r25
    199a:	88 23       	and	r24, r24
    199c:	19 f0       	breq	.+6      	; 0x19a4 <mdio_getPinValue+0x98>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    19a4:	19 82       	std	Y+1, r1	; 0x01
    19a6:	0b c0       	rjmp	.+22     	; 0x19be <mdio_getPinValue+0xb2>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Checking a specific pin value*/
			if(MDIO_PIND & au8_pin)
    19a8:	e0 e3       	ldi	r30, 0x30	; 48
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	90 81       	ld	r25, Z
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	89 23       	and	r24, r25
    19b2:	88 23       	and	r24, r24
    19b4:	19 f0       	breq	.+6      	; 0x19bc <mdio_getPinValue+0xb0>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    19bc:	19 82       	std	Y+1, r1	; 0x01
			/*Break from default case*/
			break;
	}

	/*Return the current pin value*/
	return au8_pinValue;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <MUART_Init>:
#include "MUART_private.h"
#include "LBIT_MATH.h"
#include "LSTD_TYPES.h"

void MUART_Init(void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62

   u8_t local_UCSRC = 0x00 ;
    19da:	19 82       	std	Y+1, r1	; 0x01
   SET_BIT(local_UCSRC , 7 ) ;  //select UCSRC
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	80 68       	ori	r24, 0x80	; 128
    19e0:	89 83       	std	Y+1, r24	; 0x01
    // one - stop bit
   CLEAR_BIT(local_UCSRC,USBS) ;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	87 7f       	andi	r24, 0xF7	; 247
    19e6:	89 83       	std	Y+1, r24	; 0x01
   //No parity
   CLEAR_BIT(local_UCSRC , UPM0) ;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	8f 7e       	andi	r24, 0xEF	; 239
    19ec:	89 83       	std	Y+1, r24	; 0x01
   CLEAR_BIT(local_UCSRC , UPM1) ;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	8f 7d       	andi	r24, 0xDF	; 223
    19f2:	89 83       	std	Y+1, r24	; 0x01
   // Asynchronous
   CLEAR_BIT(local_UCSRC , UMSEL);
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	8f 7b       	andi	r24, 0xBF	; 191
    19f8:	89 83       	std	Y+1, r24	; 0x01
   //8-bit data
   SET_BIT(local_UCSRC ,  UCSZ0 ) ;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	82 60       	ori	r24, 0x02	; 2
    19fe:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(local_UCSRC ,  UCSZ1 ) ;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	84 60       	ori	r24, 0x04	; 4
    1a04:	89 83       	std	Y+1, r24	; 0x01
   CLEAR_BIT(UCSRB , UCSZ2);
    1a06:	aa e2       	ldi	r26, 0x2A	; 42
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ea e2       	ldi	r30, 0x2A	; 42
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8b 7f       	andi	r24, 0xFB	; 251
    1a12:	8c 93       	st	X, r24
   //No interrupt
   UCSRB &= 0x04 ;
    1a14:	aa e2       	ldi	r26, 0x2A	; 42
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ea e2       	ldi	r30, 0x2A	; 42
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	84 70       	andi	r24, 0x04	; 4
    1a20:	8c 93       	st	X, r24
   //Setting UCSEC
   UCSRC = local_UCSRC ;
    1a22:	e0 e4       	ldi	r30, 0x40	; 64
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	80 83       	st	Z, r24
   local_UCSRC = 0x00 ;
    1a2a:	19 82       	std	Y+1, r1	; 0x01
   //baud rate 9600
   CLEAR_BIT(local_UCSRC , 7 );  //select UBRRH
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	8f 77       	andi	r24, 0x7F	; 127
    1a30:	89 83       	std	Y+1, r24	; 0x01
   UBRRL = 51 ;
    1a32:	e9 e2       	ldi	r30, 0x29	; 41
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	83 e3       	ldi	r24, 0x33	; 51
    1a38:	80 83       	st	Z, r24
   //Enable UART Protocol
   SET_BIT(UCSRB , TXEN);
    1a3a:	aa e2       	ldi	r26, 0x2A	; 42
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	ea e2       	ldi	r30, 0x2A	; 42
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	88 60       	ori	r24, 0x08	; 8
    1a46:	8c 93       	st	X, r24
   SET_BIT(UCSRB , RXEN);
    1a48:	aa e2       	ldi	r26, 0x2A	; 42
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ea e2       	ldi	r30, 0x2A	; 42
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 61       	ori	r24, 0x10	; 16
    1a54:	8c 93       	st	X, r24
}
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <MUART_Send_Data>:


void MUART_Send_Data(u8_t data)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
	 while(!GET_BIT(UCSRA , UDRE)) ;
    1a6a:	eb e2       	ldi	r30, 0x2B	; 43
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 95       	swap	r24
    1a72:	86 95       	lsr	r24
    1a74:	87 70       	andi	r24, 0x07	; 7
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	81 70       	andi	r24, 0x01	; 1
    1a7c:	90 70       	andi	r25, 0x00	; 0
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	a1 f3       	breq	.-24     	; 0x1a6a <MUART_Send_Data+0xc>
	 UDR = data ;
    1a82:	ec e2       	ldi	r30, 0x2C	; 44
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	80 83       	st	Z, r24
   return ;
}
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <MUART_Recieve_Data>:


u8_t MUART_Recieve_Data(void)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
	u8_t data ;
	while(!GET_BIT(UCSRA , RXC)) ;
    1a9c:	eb e2       	ldi	r30, 0x2B	; 43
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 23       	and	r24, r24
    1aa4:	dc f7       	brge	.-10     	; 0x1a9c <MUART_Recieve_Data+0xa>
	data = UDR ;
    1aa6:	ec e2       	ldi	r30, 0x2C	; 44
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	89 83       	std	Y+1, r24	; 0x01
	return data ;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <main>:


void lcd (void);

int main(void)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
   while(1)
   {

	    hlcd_init();
    1ac0:	0e 94 71 07 	call	0xee2	; 0xee2 <hlcd_init>

	    	lcd();
    1ac4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <lcd>
    1ac8:	fb cf       	rjmp	.-10     	; 0x1ac0 <main+0x8>

00001aca <lcd>:

}

/*this function used to display train times on LCD*/
void lcd(void)
{
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	c2 56       	subi	r28, 0x62	; 98
    1ad8:	d0 40       	sbci	r29, 0x00	; 0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
	/*Train times on LCD*/
			hlcd_setCursor(ROW_0,COL_3);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	63 e0       	ldi	r22, 0x03	; 3
    1ae8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "Welcome to");
    1aec:	80 e6       	ldi	r24, 0x60	; 96
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_1,COL_2);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "Our  Station");
    1afc:	8b e6       	ldi	r24, 0x6B	; 107
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    1b04:	fe 01       	movw	r30, r28
    1b06:	e1 5a       	subi	r30, 0xA1	; 161
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	aa e7       	ldi	r26, 0x7A	; 122
    1b10:	b4 e4       	ldi	r27, 0x44	; 68
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	05 5a       	subi	r16, 0xA5	; 165
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	fe 01       	movw	r30, r28
    1b22:	e1 5a       	subi	r30, 0xA1	; 161
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a ef       	ldi	r20, 0xFA	; 250
    1b34:	54 e4       	ldi	r21, 0x44	; 68
    1b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 83       	st	Z, r24
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	a2 83       	std	Z+2, r26	; 0x02
    1b46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e5 5a       	subi	r30, 0xA5	; 165
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	44 f4       	brge	.+16     	; 0x1b76 <lcd+0xac>
		__ticks = 1;
    1b66:	fe 01       	movw	r30, r28
    1b68:	e7 5a       	subi	r30, 0xA7	; 167
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	64 c0       	rjmp	.+200    	; 0x1c3e <lcd+0x174>
	else if (__tmp > 65535)
    1b76:	fe 01       	movw	r30, r28
    1b78:	e5 5a       	subi	r30, 0xA5	; 165
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <lcd+0xcc>
    1b94:	43 c0       	rjmp	.+134    	; 0x1c1c <lcd+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	fe 01       	movw	r30, r28
    1b98:	e1 5a       	subi	r30, 0xA1	; 161
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8e 01       	movw	r16, r28
    1bb6:	07 5a       	subi	r16, 0xA7	; 167
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	1f c0       	rjmp	.+62     	; 0x1c0c <lcd+0x142>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e9 5a       	subi	r30, 0xA9	; 169
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e9 5a       	subi	r30, 0xA9	; 169
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <lcd+0x11c>
    1bea:	fe 01       	movw	r30, r28
    1bec:	e9 5a       	subi	r30, 0xA9	; 169
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	de 01       	movw	r26, r28
    1bf6:	a7 5a       	subi	r26, 0xA7	; 167
    1bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e7 5a       	subi	r30, 0xA7	; 167
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	91 81       	ldd	r25, Z+1	; 0x01
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	9c 93       	st	X, r25
    1c0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e7 5a       	subi	r30, 0xA7	; 167
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	d1 f6       	brne	.-76     	; 0x1bce <lcd+0x104>
    1c1a:	27 c0       	rjmp	.+78     	; 0x1c6a <lcd+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	07 5a       	subi	r16, 0xA7	; 167
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	fe 01       	movw	r30, r28
    1c24:	e5 5a       	subi	r30, 0xA5	; 165
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	de 01       	movw	r26, r28
    1c40:	ab 5a       	subi	r26, 0xAB	; 171
    1c42:	bf 4f       	sbci	r27, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	e7 5a       	subi	r30, 0xA7	; 167
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	8d 93       	st	X+, r24
    1c50:	9c 93       	st	X, r25
    1c52:	fe 01       	movw	r30, r28
    1c54:	eb 5a       	subi	r30, 0xAB	; 171
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <lcd+0x192>
    1c60:	fe 01       	movw	r30, r28
    1c62:	eb 5a       	subi	r30, 0xAB	; 171
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
		_delay_ms(1000);
		hlcd_clear();
    1c6a:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

			hlcd_setCursor(ROW_0,COL_1);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "MORNING Train");
    1c76:	88 e7       	ldi	r24, 0x78	; 120
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_1,COL_4);
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	64 e0       	ldi	r22, 0x04	; 4
    1c82:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "Times ->");
    1c86:	86 e8       	ldi	r24, 0x86	; 134
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 5a       	subi	r30, 0xAF	; 175
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	aa e7       	ldi	r26, 0x7A	; 122
    1c9a:	b4 e4       	ldi	r27, 0x44	; 68
    1c9c:	80 83       	st	Z, r24
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	a2 83       	std	Z+2, r26	; 0x02
    1ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	03 5b       	subi	r16, 0xB3	; 179
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	fe 01       	movw	r30, r28
    1cac:	ef 5a       	subi	r30, 0xAF	; 175
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	f8 01       	movw	r30, r16
    1cca:	80 83       	st	Z, r24
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	a2 83       	std	Z+2, r26	; 0x02
    1cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e3 5b       	subi	r30, 0xB3	; 179
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	44 f4       	brge	.+16     	; 0x1d00 <lcd+0x236>
		__ticks = 1;
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e5 5b       	subi	r30, 0xB5	; 181
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	64 c0       	rjmp	.+200    	; 0x1dc8 <lcd+0x2fe>
	else if (__tmp > 65535)
    1d00:	fe 01       	movw	r30, r28
    1d02:	e3 5b       	subi	r30, 0xB3	; 179
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <lcd+0x256>
    1d1e:	43 c0       	rjmp	.+134    	; 0x1da6 <lcd+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 5a       	subi	r30, 0xAF	; 175
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8e 01       	movw	r16, r28
    1d40:	05 5b       	subi	r16, 0xB5	; 181
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	f8 01       	movw	r30, r16
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
    1d56:	1f c0       	rjmp	.+62     	; 0x1d96 <lcd+0x2cc>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e7 5b       	subi	r30, 0xB7	; 183
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	fe 01       	movw	r30, r28
    1d68:	e7 5b       	subi	r30, 0xB7	; 183
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <lcd+0x2a6>
    1d74:	fe 01       	movw	r30, r28
    1d76:	e7 5b       	subi	r30, 0xB7	; 183
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	de 01       	movw	r26, r28
    1d80:	a5 5b       	subi	r26, 0xB5	; 181
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	fe 01       	movw	r30, r28
    1d86:	e5 5b       	subi	r30, 0xB5	; 181
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	11 96       	adiw	r26, 0x01	; 1
    1d92:	9c 93       	st	X, r25
    1d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	fe 01       	movw	r30, r28
    1d98:	e5 5b       	subi	r30, 0xB5	; 181
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	d1 f6       	brne	.-76     	; 0x1d58 <lcd+0x28e>
    1da4:	27 c0       	rjmp	.+78     	; 0x1df4 <lcd+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da6:	8e 01       	movw	r16, r28
    1da8:	05 5b       	subi	r16, 0xB5	; 181
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	fe 01       	movw	r30, r28
    1dae:	e3 5b       	subi	r30, 0xB3	; 179
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
    1dc8:	de 01       	movw	r26, r28
    1dca:	a9 5b       	subi	r26, 0xB9	; 185
    1dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5b       	subi	r30, 0xB5	; 181
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	8d 93       	st	X+, r24
    1dda:	9c 93       	st	X, r25
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e9 5b       	subi	r30, 0xB9	; 185
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <lcd+0x31c>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e9 5b       	subi	r30, 0xB9	; 185
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24

		_delay_ms(1000);
		hlcd_clear();
    1df4:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

			hlcd_setCursor(ROW_0,COL_0);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "6:30");
    1e00:	8f e8       	ldi	r24, 0x8F	; 143
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_0,COL_8);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	68 e0       	ldi	r22, 0x08	; 8
    1e0c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "8:00");
    1e10:	84 e9       	ldi	r24, 0x94	; 148
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_1,COL_0);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "9:30");
    1e20:	89 e9       	ldi	r24, 0x99	; 153
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_1,COL_8);
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	68 e0       	ldi	r22, 0x08	; 8
    1e2c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "11:00");
    1e30:	8e e9       	ldi	r24, 0x9E	; 158
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ed 5b       	subi	r30, 0xBD	; 189
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	aa ef       	ldi	r26, 0xFA	; 250
    1e44:	b4 e4       	ldi	r27, 0x44	; 68
    1e46:	80 83       	st	Z, r24
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	a2 83       	std	Z+2, r26	; 0x02
    1e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4e:	8e 01       	movw	r16, r28
    1e50:	01 5c       	subi	r16, 0xC1	; 193
    1e52:	1f 4f       	sbci	r17, 0xFF	; 255
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 5b       	subi	r30, 0xBD	; 189
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a ef       	ldi	r20, 0xFA	; 250
    1e68:	54 e4       	ldi	r21, 0x44	; 68
    1e6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	f8 01       	movw	r30, r16
    1e74:	80 83       	st	Z, r24
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	a2 83       	std	Z+2, r26	; 0x02
    1e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ff 96       	adiw	r30, 0x3f	; 63
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <lcd+0x3d8>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9e af       	std	Y+62, r25	; 0x3e
    1e9e:	8d af       	std	Y+61, r24	; 0x3d
    1ea0:	46 c0       	rjmp	.+140    	; 0x1f2e <lcd+0x464>
	else if (__tmp > 65535)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ff 96       	adiw	r30, 0x3f	; 63
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	4f e7       	ldi	r20, 0x7F	; 127
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	64 f5       	brge	.+88     	; 0x1f16 <lcd+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ed 5b       	subi	r30, 0xBD	; 189
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e2       	ldi	r20, 0x20	; 32
    1ed2:	51 e4       	ldi	r21, 0x41	; 65
    1ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e af       	std	Y+62, r25	; 0x3e
    1eea:	8d af       	std	Y+61, r24	; 0x3d
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <lcd+0x442>
    1eee:	88 ec       	ldi	r24, 0xC8	; 200
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c af       	std	Y+60, r25	; 0x3c
    1ef4:	8b af       	std	Y+59, r24	; 0x3b
    1ef6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ef8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <lcd+0x430>
    1efe:	9c af       	std	Y+60, r25	; 0x3c
    1f00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	9e af       	std	Y+62, r25	; 0x3e
    1f0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	69 f7       	brne	.-38     	; 0x1eee <lcd+0x424>
    1f14:	16 c0       	rjmp	.+44     	; 0x1f42 <lcd+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	fe 01       	movw	r30, r28
    1f18:	ff 96       	adiw	r30, 0x3f	; 63
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e af       	std	Y+62, r25	; 0x3e
    1f2c:	8d af       	std	Y+61, r24	; 0x3d
    1f2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f32:	9a af       	std	Y+58, r25	; 0x3a
    1f34:	89 af       	std	Y+57, r24	; 0x39
    1f36:	89 ad       	ldd	r24, Y+57	; 0x39
    1f38:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <lcd+0x470>
    1f3e:	9a af       	std	Y+58, r25	; 0x3a
    1f40:	89 af       	std	Y+57, r24	; 0x39

	    _delay_ms(2000);
		hlcd_clear();
    1f42:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

			hlcd_setCursor(ROW_0,COL_0);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "Afternoon Train");
    1f4e:	84 ea       	ldi	r24, 0xA4	; 164
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_1,COL_4);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	64 e0       	ldi	r22, 0x04	; 4
    1f5a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "Times ->");
    1f5e:	86 e8       	ldi	r24, 0x86	; 134
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	aa e7       	ldi	r26, 0x7A	; 122
    1f6c:	b4 e4       	ldi	r27, 0x44	; 68
    1f6e:	8d ab       	std	Y+53, r24	; 0x35
    1f70:	9e ab       	std	Y+54, r25	; 0x36
    1f72:	af ab       	std	Y+55, r26	; 0x37
    1f74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6d a9       	ldd	r22, Y+53	; 0x35
    1f78:	7e a9       	ldd	r23, Y+54	; 0x36
    1f7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a ef       	ldi	r20, 0xFA	; 250
    1f84:	54 e4       	ldi	r21, 0x44	; 68
    1f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	89 ab       	std	Y+49, r24	; 0x31
    1f90:	9a ab       	std	Y+50, r25	; 0x32
    1f92:	ab ab       	std	Y+51, r26	; 0x33
    1f94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f96:	69 a9       	ldd	r22, Y+49	; 0x31
    1f98:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <lcd+0x4ee>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	98 ab       	std	Y+48, r25	; 0x30
    1fb4:	8f a7       	std	Y+47, r24	; 0x2f
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <lcd+0x56c>
	else if (__tmp > 65535)
    1fb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fba:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <lcd+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	98 ab       	std	Y+48, r25	; 0x30
    1ff6:	8f a7       	std	Y+47, r24	; 0x2f
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <lcd+0x54e>
    1ffa:	88 ec       	ldi	r24, 0xC8	; 200
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9e a7       	std	Y+46, r25	; 0x2e
    2000:	8d a7       	std	Y+45, r24	; 0x2d
    2002:	8d a5       	ldd	r24, Y+45	; 0x2d
    2004:	9e a5       	ldd	r25, Y+46	; 0x2e
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <lcd+0x53c>
    200a:	9e a7       	std	Y+46, r25	; 0x2e
    200c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2010:	98 a9       	ldd	r25, Y+48	; 0x30
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	98 ab       	std	Y+48, r25	; 0x30
    2016:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8f a5       	ldd	r24, Y+47	; 0x2f
    201a:	98 a9       	ldd	r25, Y+48	; 0x30
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <lcd+0x530>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <lcd+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	69 a9       	ldd	r22, Y+49	; 0x31
    2024:	7a a9       	ldd	r23, Y+50	; 0x32
    2026:	8b a9       	ldd	r24, Y+51	; 0x33
    2028:	9c a9       	ldd	r25, Y+52	; 0x34
    202a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	98 ab       	std	Y+48, r25	; 0x30
    2034:	8f a7       	std	Y+47, r24	; 0x2f
    2036:	8f a5       	ldd	r24, Y+47	; 0x2f
    2038:	98 a9       	ldd	r25, Y+48	; 0x30
    203a:	9c a7       	std	Y+44, r25	; 0x2c
    203c:	8b a7       	std	Y+43, r24	; 0x2b
    203e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2040:	9c a5       	ldd	r25, Y+44	; 0x2c
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <lcd+0x578>
    2046:	9c a7       	std	Y+44, r25	; 0x2c
    2048:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(1000);
		hlcd_clear();
    204a:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

			hlcd_setCursor(ROW_0,COL_0);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "12:30");
    2056:	84 eb       	ldi	r24, 0xB4	; 180
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_0,COL_9);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	69 e0       	ldi	r22, 0x09	; 9
    2062:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "2:00");
    2066:	8a eb       	ldi	r24, 0xBA	; 186
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
			hlcd_setCursor(ROW_1,COL_0);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "3:30");
    2076:	8f eb       	ldi	r24, 0xBF	; 191
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
		    hlcd_setCursor(ROW_1,COL_9);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	69 e0       	ldi	r22, 0x09	; 9
    2082:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
			hlcd_displayString((u8_t*) "5:00");
    2086:	84 ec       	ldi	r24, 0xC4	; 196
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	aa ef       	ldi	r26, 0xFA	; 250
    2094:	b4 e4       	ldi	r27, 0x44	; 68
    2096:	8f a3       	std	Y+39, r24	; 0x27
    2098:	98 a7       	std	Y+40, r25	; 0x28
    209a:	a9 a7       	std	Y+41, r26	; 0x29
    209c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6f a1       	ldd	r22, Y+39	; 0x27
    20a0:	78 a5       	ldd	r23, Y+40	; 0x28
    20a2:	89 a5       	ldd	r24, Y+41	; 0x29
    20a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a ef       	ldi	r20, 0xFA	; 250
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8b a3       	std	Y+35, r24	; 0x23
    20b8:	9c a3       	std	Y+36, r25	; 0x24
    20ba:	ad a3       	std	Y+37, r26	; 0x25
    20bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20be:	6b a1       	ldd	r22, Y+35	; 0x23
    20c0:	7c a1       	ldd	r23, Y+36	; 0x24
    20c2:	8d a1       	ldd	r24, Y+37	; 0x25
    20c4:	9e a1       	ldd	r25, Y+38	; 0x26
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <lcd+0x616>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9a a3       	std	Y+34, r25	; 0x22
    20dc:	89 a3       	std	Y+33, r24	; 0x21
    20de:	3f c0       	rjmp	.+126    	; 0x215e <lcd+0x694>
	else if (__tmp > 65535)
    20e0:	6b a1       	ldd	r22, Y+35	; 0x23
    20e2:	7c a1       	ldd	r23, Y+36	; 0x24
    20e4:	8d a1       	ldd	r24, Y+37	; 0x25
    20e6:	9e a1       	ldd	r25, Y+38	; 0x26
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <lcd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6f a1       	ldd	r22, Y+39	; 0x27
    20fa:	78 a5       	ldd	r23, Y+40	; 0x28
    20fc:	89 a5       	ldd	r24, Y+41	; 0x29
    20fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <lcd+0x676>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	98 a3       	std	Y+32, r25	; 0x20
    2128:	8f 8f       	std	Y+31, r24	; 0x1f
    212a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    212c:	98 a1       	ldd	r25, Y+32	; 0x20
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <lcd+0x664>
    2132:	98 a3       	std	Y+32, r25	; 0x20
    2134:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	89 a1       	ldd	r24, Y+33	; 0x21
    2138:	9a a1       	ldd	r25, Y+34	; 0x22
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9a a3       	std	Y+34, r25	; 0x22
    213e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	89 a1       	ldd	r24, Y+33	; 0x21
    2142:	9a a1       	ldd	r25, Y+34	; 0x22
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <lcd+0x658>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <lcd+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	6b a1       	ldd	r22, Y+35	; 0x23
    214c:	7c a1       	ldd	r23, Y+36	; 0x24
    214e:	8d a1       	ldd	r24, Y+37	; 0x25
    2150:	9e a1       	ldd	r25, Y+38	; 0x26
    2152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9a a3       	std	Y+34, r25	; 0x22
    215c:	89 a3       	std	Y+33, r24	; 0x21
    215e:	89 a1       	ldd	r24, Y+33	; 0x21
    2160:	9a a1       	ldd	r25, Y+34	; 0x22
    2162:	9e 8f       	std	Y+30, r25	; 0x1e
    2164:	8d 8f       	std	Y+29, r24	; 0x1d
    2166:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2168:	9e 8d       	ldd	r25, Y+30	; 0x1e
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <lcd+0x6a0>
    216e:	9e 8f       	std	Y+30, r25	; 0x1e
    2170:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(2000);
		hlcd_clear();
    2172:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

		        hlcd_setCursor(ROW_0,COL_0);
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
				hlcd_displayString((u8_t*) "EVENING Train");
    217e:	89 ec       	ldi	r24, 0xC9	; 201
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
				hlcd_setCursor(ROW_1,COL_4);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	64 e0       	ldi	r22, 0x04	; 4
    218a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
				hlcd_displayString((u8_t*) "Times ->");
    218e:	86 e8       	ldi	r24, 0x86	; 134
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	aa e7       	ldi	r26, 0x7A	; 122
    219c:	b4 e4       	ldi	r27, 0x44	; 68
    219e:	89 8f       	std	Y+25, r24	; 0x19
    21a0:	9a 8f       	std	Y+26, r25	; 0x1a
    21a2:	ab 8f       	std	Y+27, r26	; 0x1b
    21a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	69 8d       	ldd	r22, Y+25	; 0x19
    21a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a ef       	ldi	r20, 0xFA	; 250
    21b4:	54 e4       	ldi	r21, 0x44	; 68
    21b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8d 8b       	std	Y+21, r24	; 0x15
    21c0:	9e 8b       	std	Y+22, r25	; 0x16
    21c2:	af 8b       	std	Y+23, r26	; 0x17
    21c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21c6:	6d 89       	ldd	r22, Y+21	; 0x15
    21c8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ca:	8f 89       	ldd	r24, Y+23	; 0x17
    21cc:	98 8d       	ldd	r25, Y+24	; 0x18
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <lcd+0x71e>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <lcd+0x79c>
	else if (__tmp > 65535)
    21e8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ea:	7e 89       	ldd	r23, Y+22	; 0x16
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	57 e4       	ldi	r21, 0x47	; 71
    21f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <lcd+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	69 8d       	ldd	r22, Y+25	; 0x19
    2202:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2204:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2206:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9c 8b       	std	Y+20, r25	; 0x14
    2226:	8b 8b       	std	Y+19, r24	; 0x13
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <lcd+0x77e>
    222a:	88 ec       	ldi	r24, 0xC8	; 200
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9a 8b       	std	Y+18, r25	; 0x12
    2230:	89 8b       	std	Y+17, r24	; 0x11
    2232:	89 89       	ldd	r24, Y+17	; 0x11
    2234:	9a 89       	ldd	r25, Y+18	; 0x12
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <lcd+0x76c>
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	8b 89       	ldd	r24, Y+19	; 0x13
    224a:	9c 89       	ldd	r25, Y+20	; 0x14
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	69 f7       	brne	.-38     	; 0x222a <lcd+0x760>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <lcd+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6d 89       	ldd	r22, Y+21	; 0x15
    2254:	7e 89       	ldd	r23, Y+22	; 0x16
    2256:	8f 89       	ldd	r24, Y+23	; 0x17
    2258:	98 8d       	ldd	r25, Y+24	; 0x18
    225a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9c 8b       	std	Y+20, r25	; 0x14
    2264:	8b 8b       	std	Y+19, r24	; 0x13
    2266:	8b 89       	ldd	r24, Y+19	; 0x13
    2268:	9c 89       	ldd	r25, Y+20	; 0x14
    226a:	98 8b       	std	Y+16, r25	; 0x10
    226c:	8f 87       	std	Y+15, r24	; 0x0f
    226e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2270:	98 89       	ldd	r25, Y+16	; 0x10
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <lcd+0x7a8>
    2276:	98 8b       	std	Y+16, r25	; 0x10
    2278:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1000);
		hlcd_clear();
    227a:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

				hlcd_setCursor(ROW_0,COL_0);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
				hlcd_displayString((u8_t*) "7:00");
    2286:	87 ed       	ldi	r24, 0xD7	; 215
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
				hlcd_setCursor(ROW_0,COL_9);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	69 e0       	ldi	r22, 0x09	; 9
    2292:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
				hlcd_displayString((u8_t*) "9:00");
    2296:	8c ed       	ldi	r24, 0xDC	; 220
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
				hlcd_setCursor(ROW_1,COL_0);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
				hlcd_displayString((u8_t*) "10:00");
    22a6:	81 ee       	ldi	r24, 0xE1	; 225
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
				hlcd_setCursor(ROW_1,COL_9);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	69 e0       	ldi	r22, 0x09	; 9
    22b2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <hlcd_setCursor>
				hlcd_displayString((u8_t*) "12:00");
    22b6:	87 ee       	ldi	r24, 0xE7	; 231
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 ff 09 	call	0x13fe	; 0x13fe <hlcd_displayString>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	aa ef       	ldi	r26, 0xFA	; 250
    22c4:	b4 e4       	ldi	r27, 0x44	; 68
    22c6:	8b 87       	std	Y+11, r24	; 0x0b
    22c8:	9c 87       	std	Y+12, r25	; 0x0c
    22ca:	ad 87       	std	Y+13, r26	; 0x0d
    22cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a ef       	ldi	r20, 0xFA	; 250
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8f 83       	std	Y+7, r24	; 0x07
    22e8:	98 87       	std	Y+8, r25	; 0x08
    22ea:	a9 87       	std	Y+9, r26	; 0x09
    22ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ee:	6f 81       	ldd	r22, Y+7	; 0x07
    22f0:	78 85       	ldd	r23, Y+8	; 0x08
    22f2:	89 85       	ldd	r24, Y+9	; 0x09
    22f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2302:	88 23       	and	r24, r24
    2304:	2c f4       	brge	.+10     	; 0x2310 <lcd+0x846>
		__ticks = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	3f c0       	rjmp	.+126    	; 0x238e <lcd+0x8c4>
	else if (__tmp > 65535)
    2310:	6f 81       	ldd	r22, Y+7	; 0x07
    2312:	78 85       	ldd	r23, Y+8	; 0x08
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3f ef       	ldi	r19, 0xFF	; 255
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	57 e4       	ldi	r21, 0x47	; 71
    2320:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	4c f5       	brge	.+82     	; 0x237a <lcd+0x8b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2328:	6b 85       	ldd	r22, Y+11	; 0x0b
    232a:	7c 85       	ldd	r23, Y+12	; 0x0c
    232c:	8d 85       	ldd	r24, Y+13	; 0x0d
    232e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	51 e4       	ldi	r21, 0x41	; 65
    2338:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	0f c0       	rjmp	.+30     	; 0x2370 <lcd+0x8a6>
    2352:	88 ec       	ldi	r24, 0xC8	; 200
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9c 83       	std	Y+4, r25	; 0x04
    2358:	8b 83       	std	Y+3, r24	; 0x03
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <lcd+0x894>
    2362:	9c 83       	std	Y+4, r25	; 0x04
    2364:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	69 f7       	brne	.-38     	; 0x2352 <lcd+0x888>
    2378:	14 c0       	rjmp	.+40     	; 0x23a2 <lcd+0x8d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <lcd+0x8d0>
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2000);
		hlcd_clear();
    23a2:	0e 94 42 0a 	call	0x1484	; 0x1484 <hlcd_clear>

	return;
}
    23a6:	ce 59       	subi	r28, 0x9E	; 158
    23a8:	df 4f       	sbci	r29, 0xFF	; 255
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <__prologue_saves__>:
    23be:	2f 92       	push	r2
    23c0:	3f 92       	push	r3
    23c2:	4f 92       	push	r4
    23c4:	5f 92       	push	r5
    23c6:	6f 92       	push	r6
    23c8:	7f 92       	push	r7
    23ca:	8f 92       	push	r8
    23cc:	9f 92       	push	r9
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	ca 1b       	sub	r28, r26
    23e8:	db 0b       	sbc	r29, r27
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	09 94       	ijmp

000023f6 <__epilogue_restores__>:
    23f6:	2a 88       	ldd	r2, Y+18	; 0x12
    23f8:	39 88       	ldd	r3, Y+17	; 0x11
    23fa:	48 88       	ldd	r4, Y+16	; 0x10
    23fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    23fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2400:	7d 84       	ldd	r7, Y+13	; 0x0d
    2402:	8c 84       	ldd	r8, Y+12	; 0x0c
    2404:	9b 84       	ldd	r9, Y+11	; 0x0b
    2406:	aa 84       	ldd	r10, Y+10	; 0x0a
    2408:	b9 84       	ldd	r11, Y+9	; 0x09
    240a:	c8 84       	ldd	r12, Y+8	; 0x08
    240c:	df 80       	ldd	r13, Y+7	; 0x07
    240e:	ee 80       	ldd	r14, Y+6	; 0x06
    2410:	fd 80       	ldd	r15, Y+5	; 0x05
    2412:	0c 81       	ldd	r16, Y+4	; 0x04
    2414:	1b 81       	ldd	r17, Y+3	; 0x03
    2416:	aa 81       	ldd	r26, Y+2	; 0x02
    2418:	b9 81       	ldd	r27, Y+1	; 0x01
    241a:	ce 0f       	add	r28, r30
    241c:	d1 1d       	adc	r29, r1
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	ed 01       	movw	r28, r26
    242a:	08 95       	ret

0000242c <_exit>:
    242c:	f8 94       	cli

0000242e <__stop_program>:
    242e:	ff cf       	rjmp	.-2      	; 0x242e <__stop_program>
