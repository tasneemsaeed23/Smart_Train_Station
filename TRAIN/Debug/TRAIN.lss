
TRAIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002598  0000262c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800068  00800068  00002634  2**0
                  ALLOC
  3 .stab         00002268  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b4c  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000053e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000072e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e9       	ldi	r30, 0x98	; 152
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 99 11 	call	0x2332	; 0x2332 <main>
      8a:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 12 	jmp	0x255e	; 0x255e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 12 	jmp	0x255e	; 0x255e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <h7seg_first_init>:
/************************************************************************************************/
/*                                    Functions' definitions                                    */
/************************************************************************************************/

void h7seg_first_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Setting the seven segment pins status as output*/
	mdio_setPinStatus(H7SEG_PORT, (H7SEG1_A | H7SEG1_B | H7SEG1_C | H7SEG1_D), OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	6f e0       	ldi	r22, 0x0F	; 15
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>


}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <h7seg_first_displayNumber>:

void h7seg_first_displayNumber(u8_t au8_number)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	0f 92       	push	r0
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	89 83       	std	Y+1, r24	; 0x01
	/*Setting binary number form over DIO pins*/
	mdio_setPinValue(H7SEG_PORT, H7SEG1_A, GET_BIT(au8_number, 0));
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	98 2f       	mov	r25, r24
     b6e:	91 70       	andi	r25, 0x01	; 1
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	49 2f       	mov	r20, r25
     b76:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	mdio_setPinValue(H7SEG_PORT, H7SEG1_B, GET_BIT(au8_number, 1));
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	86 95       	lsr	r24
     b7e:	98 2f       	mov	r25, r24
     b80:	91 70       	andi	r25, 0x01	; 1
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	49 2f       	mov	r20, r25
     b88:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	mdio_setPinValue(H7SEG_PORT, H7SEG1_C, GET_BIT(au8_number, 2));
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	86 95       	lsr	r24
     b90:	86 95       	lsr	r24
     b92:	98 2f       	mov	r25, r24
     b94:	91 70       	andi	r25, 0x01	; 1
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	64 e0       	ldi	r22, 0x04	; 4
     b9a:	49 2f       	mov	r20, r25
     b9c:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	mdio_setPinValue(H7SEG_PORT, H7SEG1_D, GET_BIT(au8_number, 3));
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	86 95       	lsr	r24
     ba4:	86 95       	lsr	r24
     ba6:	86 95       	lsr	r24
     ba8:	98 2f       	mov	r25, r24
     baa:	91 70       	andi	r25, 0x01	; 1
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	68 e0       	ldi	r22, 0x08	; 8
     bb0:	49 2f       	mov	r20, r25
     bb2:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>

	/*Return from this function*/
	return;
}
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <h7seg_second_init>:
/************************************************************************************************/
/*                                    Functions' definitions                                    */
/************************************************************************************************/

void h7seg_second_init(void)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	/*Setting the seven segment pins status as output*/
	mdio_setPinStatus(H7SEG2_PORT, (H7SEG2_A | H7SEG2_B | H7SEG2_C | H7SEG2_D), OUTPUT);
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	60 ef       	ldi	r22, 0xF0	; 240
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>

	/*Return from this function*/
	return;
}
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <h7seg_second_displayNumber>:

void h7seg_second_displayNumber(u8_t au8_number)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	0f 92       	push	r0
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	89 83       	std	Y+1, r24	; 0x01
	/*Setting binary number form over DIO pins*/
	mdio_setPinValue(H7SEG2_PORT, H7SEG2_A, GET_BIT(au8_number, 0));
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	98 2f       	mov	r25, r24
     be6:	91 70       	andi	r25, 0x01	; 1
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	60 e1       	ldi	r22, 0x10	; 16
     bec:	49 2f       	mov	r20, r25
     bee:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	mdio_setPinValue(H7SEG2_PORT, H7SEG2_B, GET_BIT(au8_number, 1));
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	86 95       	lsr	r24
     bf6:	98 2f       	mov	r25, r24
     bf8:	91 70       	andi	r25, 0x01	; 1
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	60 e2       	ldi	r22, 0x20	; 32
     bfe:	49 2f       	mov	r20, r25
     c00:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	mdio_setPinValue(H7SEG2_PORT, H7SEG2_C, GET_BIT(au8_number, 2));
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	86 95       	lsr	r24
     c08:	86 95       	lsr	r24
     c0a:	98 2f       	mov	r25, r24
     c0c:	91 70       	andi	r25, 0x01	; 1
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	60 e4       	ldi	r22, 0x40	; 64
     c12:	49 2f       	mov	r20, r25
     c14:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	mdio_setPinValue(H7SEG2_PORT, H7SEG2_D, GET_BIT(au8_number, 3));
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	86 95       	lsr	r24
     c1c:	86 95       	lsr	r24
     c1e:	86 95       	lsr	r24
     c20:	98 2f       	mov	r25, r24
     c22:	91 70       	andi	r25, 0x01	; 1
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	60 e8       	ldi	r22, 0x80	; 128
     c28:	49 2f       	mov	r20, r25
     c2a:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>

	/*Return from this function*/
	return;
}
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <madc_init>:
#include "MADC_private.h"
#include "LSTD_TYPES.h"
#include "LBIT_MATH.h"

void madc_init(void)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,7);
     c3e:	a7 e2       	ldi	r26, 0x27	; 39
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e7 e2       	ldi	r30, 0x27	; 39
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 68       	ori	r24, 0x80	; 128
     c4a:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,6);
     c4c:	a7 e2       	ldi	r26, 0x27	; 39
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e7 e2       	ldi	r30, 0x27	; 39
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8f 7b       	andi	r24, 0xBF	; 191
     c58:	8c 93       	st	X, r24

	CLEAR_BIT(ADMUX,5);
     c5a:	a7 e2       	ldi	r26, 0x27	; 39
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e7 e2       	ldi	r30, 0x27	; 39
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8f 7d       	andi	r24, 0xDF	; 223
     c66:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,0);
     c68:	a6 e2       	ldi	r26, 0x26	; 38
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
     c84:	a6 e2       	ldi	r26, 0x26	; 38
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e6 e2       	ldi	r30, 0x26	; 38
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	84 60       	ori	r24, 0x04	; 4
     c90:	8c 93       	st	X, r24

	SET_BIT(ADCSRA, 7);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 68       	ori	r24, 0x80	; 128
     c9e:	8c 93       	st	X, r24
	/*return from this function*/
		return;
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <madc_ReadAnalogPolling>:

u16_t madc_ReadAnalogPolling(u8_t au8_channel)
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	0f 92       	push	r0
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= 0b11100000;
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 7e       	andi	r24, 0xE0	; 224
     cbe:	8c 93       	st	X, r24
	ADMUX |= au8_channel;
     cc0:	a7 e2       	ldi	r26, 0x27	; 39
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e2       	ldi	r30, 0x27	; 39
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	90 81       	ld	r25, Z
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	89 2b       	or	r24, r25
     cce:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 6);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,4) == 0);
     cde:	e6 e2       	ldi	r30, 0x26	; 38
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 95       	swap	r24
     ce6:	8f 70       	andi	r24, 0x0F	; 15
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	a9 f3       	breq	.-22     	; 0xcde <madc_ReadAnalogPolling+0x38>

	SET_BIT(ADCSRA,4);
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 61       	ori	r24, 0x10	; 16
     d00:	8c 93       	st	X, r24

	/*return from this function*/
		return ADCL;
     d02:	e4 e2       	ldi	r30, 0x24	; 36
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <mdio_setPinStatus>:
/************************************************************************************************/
/*                                    Functions' definitions                                    */
/************************************************************************************************/

void mdio_setPinStatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	2d 97       	sbiw	r28, 0x0d	; 13
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	6a 83       	std	Y+2, r22	; 0x02
     d2a:	4b 83       	std	Y+3, r20	; 0x03
	/*Switching over DIO Ports*/
	switch(au8_port)
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	3d 87       	std	Y+13, r19	; 0x0d
     d34:	2c 87       	std	Y+12, r18	; 0x0c
     d36:	8c 85       	ldd	r24, Y+12	; 0x0c
     d38:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	91 05       	cpc	r25, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <mdio_setPinStatus+0x30>
     d40:	54 c0       	rjmp	.+168    	; 0xdea <mdio_setPinStatus+0xd8>
     d42:	2c 85       	ldd	r18, Y+12	; 0x0c
     d44:	3d 85       	ldd	r19, Y+13	; 0x0d
     d46:	23 30       	cpi	r18, 0x03	; 3
     d48:	31 05       	cpc	r19, r1
     d4a:	34 f4       	brge	.+12     	; 0xd58 <mdio_setPinStatus+0x46>
     d4c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d4e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	91 05       	cpc	r25, r1
     d54:	71 f0       	breq	.+28     	; 0xd72 <mdio_setPinStatus+0x60>
     d56:	fb c0       	rjmp	.+502    	; 0xf4e <mdio_setPinStatus+0x23c>
     d58:	2c 85       	ldd	r18, Y+12	; 0x0c
     d5a:	3d 85       	ldd	r19, Y+13	; 0x0d
     d5c:	23 30       	cpi	r18, 0x03	; 3
     d5e:	31 05       	cpc	r19, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <mdio_setPinStatus+0x52>
     d62:	7f c0       	rjmp	.+254    	; 0xe62 <mdio_setPinStatus+0x150>
     d64:	8c 85       	ldd	r24, Y+12	; 0x0c
     d66:	9d 85       	ldd	r25, Y+13	; 0x0d
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <mdio_setPinStatus+0x5e>
     d6e:	b5 c0       	rjmp	.+362    	; 0xeda <mdio_setPinStatus+0x1c8>
     d70:	ee c0       	rjmp	.+476    	; 0xf4e <mdio_setPinStatus+0x23c>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Switching over pin status*/
			switch(au8_status)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	3b 87       	std	Y+11, r19	; 0x0b
     d7a:	2a 87       	std	Y+10, r18	; 0x0a
     d7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	91 05       	cpc	r25, r1
     d84:	a1 f0       	breq	.+40     	; 0xdae <mdio_setPinStatus+0x9c>
     d86:	2a 85       	ldd	r18, Y+10	; 0x0a
     d88:	3b 85       	ldd	r19, Y+11	; 0x0b
     d8a:	23 30       	cpi	r18, 0x03	; 3
     d8c:	31 05       	cpc	r19, r1
     d8e:	d1 f0       	breq	.+52     	; 0xdc4 <mdio_setPinStatus+0xb2>
     d90:	8a 85       	ldd	r24, Y+10	; 0x0a
     d92:	9b 85       	ldd	r25, Y+11	; 0x0b
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	09 f0       	breq	.+2      	; 0xd9c <mdio_setPinStatus+0x8a>
     d9a:	d9 c0       	rjmp	.+434    	; 0xf4e <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRA |= au8_pin;
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	90 81       	ld	r25, Z
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	89 2b       	or	r24, r25
     daa:	8c 93       	st	X, r24
     dac:	d0 c0       	rjmp	.+416    	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	98 2f       	mov	r25, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	80 95       	com	r24
     dbe:	89 23       	and	r24, r25
     dc0:	8c 93       	st	X, r24
     dc2:	c5 c0       	rjmp	.+394    	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
     dc4:	aa e3       	ldi	r26, 0x3A	; 58
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ea e3       	ldi	r30, 0x3A	; 58
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	98 2f       	mov	r25, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	80 95       	com	r24
     dd4:	89 23       	and	r24, r25
     dd6:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTA |= au8_pin;
     dd8:	ab e3       	ldi	r26, 0x3B	; 59
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	90 81       	ld	r25, Z
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	89 2b       	or	r24, r25
     de6:	8c 93       	st	X, r24
     de8:	b2 c0       	rjmp	.+356    	; 0xf4e <mdio_setPinStatus+0x23c>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Switching over pin status*/
			switch(au8_status)
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	39 87       	std	Y+9, r19	; 0x09
     df2:	28 87       	std	Y+8, r18	; 0x08
     df4:	88 85       	ldd	r24, Y+8	; 0x08
     df6:	99 85       	ldd	r25, Y+9	; 0x09
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	91 05       	cpc	r25, r1
     dfc:	a1 f0       	breq	.+40     	; 0xe26 <mdio_setPinStatus+0x114>
     dfe:	28 85       	ldd	r18, Y+8	; 0x08
     e00:	39 85       	ldd	r19, Y+9	; 0x09
     e02:	23 30       	cpi	r18, 0x03	; 3
     e04:	31 05       	cpc	r19, r1
     e06:	d1 f0       	breq	.+52     	; 0xe3c <mdio_setPinStatus+0x12a>
     e08:	88 85       	ldd	r24, Y+8	; 0x08
     e0a:	99 85       	ldd	r25, Y+9	; 0x09
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f0       	breq	.+2      	; 0xe14 <mdio_setPinStatus+0x102>
     e12:	9d c0       	rjmp	.+314    	; 0xf4e <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRB |= au8_pin;
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	90 81       	ld	r25, Z
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	89 2b       	or	r24, r25
     e22:	8c 93       	st	X, r24
     e24:	94 c0       	rjmp	.+296    	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRB &= ~au8_pin;
     e26:	a7 e3       	ldi	r26, 0x37	; 55
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	98 2f       	mov	r25, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	80 95       	com	r24
     e36:	89 23       	and	r24, r25
     e38:	8c 93       	st	X, r24
     e3a:	89 c0       	rjmp	.+274    	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRB &= ~au8_pin;
     e3c:	a7 e3       	ldi	r26, 0x37	; 55
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e3       	ldi	r30, 0x37	; 55
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	98 2f       	mov	r25, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	80 95       	com	r24
     e4c:	89 23       	and	r24, r25
     e4e:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTB |= au8_pin;
     e50:	a8 e3       	ldi	r26, 0x38	; 56
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e8 e3       	ldi	r30, 0x38	; 56
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	90 81       	ld	r25, Z
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	89 2b       	or	r24, r25
     e5e:	8c 93       	st	X, r24
     e60:	76 c0       	rjmp	.+236    	; 0xf4e <mdio_setPinStatus+0x23c>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Switching over pin status*/
			switch(au8_status)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3f 83       	std	Y+7, r19	; 0x07
     e6a:	2e 83       	std	Y+6, r18	; 0x06
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 05       	cpc	r25, r1
     e74:	a1 f0       	breq	.+40     	; 0xe9e <mdio_setPinStatus+0x18c>
     e76:	2e 81       	ldd	r18, Y+6	; 0x06
     e78:	3f 81       	ldd	r19, Y+7	; 0x07
     e7a:	23 30       	cpi	r18, 0x03	; 3
     e7c:	31 05       	cpc	r19, r1
     e7e:	d1 f0       	breq	.+52     	; 0xeb4 <mdio_setPinStatus+0x1a2>
     e80:	8e 81       	ldd	r24, Y+6	; 0x06
     e82:	9f 81       	ldd	r25, Y+7	; 0x07
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	09 f0       	breq	.+2      	; 0xe8c <mdio_setPinStatus+0x17a>
     e8a:	61 c0       	rjmp	.+194    	; 0xf4e <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRC |= au8_pin;
     e8c:	a4 e3       	ldi	r26, 0x34	; 52
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e3       	ldi	r30, 0x34	; 52
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	90 81       	ld	r25, Z
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	89 2b       	or	r24, r25
     e9a:	8c 93       	st	X, r24
     e9c:	58 c0       	rjmp	.+176    	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRC &= ~au8_pin;
     e9e:	a4 e3       	ldi	r26, 0x34	; 52
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e4 e3       	ldi	r30, 0x34	; 52
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	98 2f       	mov	r25, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	80 95       	com	r24
     eae:	89 23       	and	r24, r25
     eb0:	8c 93       	st	X, r24
     eb2:	4d c0       	rjmp	.+154    	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRC &= ~au8_pin;
     eb4:	a4 e3       	ldi	r26, 0x34	; 52
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e4 e3       	ldi	r30, 0x34	; 52
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	98 2f       	mov	r25, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	80 95       	com	r24
     ec4:	89 23       	and	r24, r25
     ec6:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTC |= au8_pin;
     ec8:	a5 e3       	ldi	r26, 0x35	; 53
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e3       	ldi	r30, 0x35	; 53
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	90 81       	ld	r25, Z
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	89 2b       	or	r24, r25
     ed6:	8c 93       	st	X, r24
     ed8:	3a c0       	rjmp	.+116    	; 0xf4e <mdio_setPinStatus+0x23c>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Switching over pin status*/
			switch(au8_status)
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	3d 83       	std	Y+5, r19	; 0x05
     ee2:	2c 83       	std	Y+4, r18	; 0x04
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	9d 81       	ldd	r25, Y+5	; 0x05
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	91 05       	cpc	r25, r1
     eec:	99 f0       	breq	.+38     	; 0xf14 <mdio_setPinStatus+0x202>
     eee:	2c 81       	ldd	r18, Y+4	; 0x04
     ef0:	3d 81       	ldd	r19, Y+5	; 0x05
     ef2:	23 30       	cpi	r18, 0x03	; 3
     ef4:	31 05       	cpc	r19, r1
     ef6:	c9 f0       	breq	.+50     	; 0xf2a <mdio_setPinStatus+0x218>
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	9d 81       	ldd	r25, Y+5	; 0x05
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	91 05       	cpc	r25, r1
     f00:	31 f5       	brne	.+76     	; 0xf4e <mdio_setPinStatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:

					/*Setting specific DIO pins to output*/
					MDIO_DDRD |= au8_pin;
     f02:	a1 e3       	ldi	r26, 0x31	; 49
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	90 81       	ld	r25, Z
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	89 2b       	or	r24, r25
     f10:	8c 93       	st	X, r24
     f12:	1d c0       	rjmp	.+58     	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input floating*/
				case INPUT_FLOAT:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRD &= ~au8_pin;
     f14:	a1 e3       	ldi	r26, 0x31	; 49
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e1 e3       	ldi	r30, 0x31	; 49
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	98 2f       	mov	r25, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	80 95       	com	r24
     f24:	89 23       	and	r24, r25
     f26:	8c 93       	st	X, r24
     f28:	12 c0       	rjmp	.+36     	; 0xf4e <mdio_setPinStatus+0x23c>

				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:

					/*Setting specific DIO pins to input floating*/
					MDIO_DDRD &= ~au8_pin;
     f2a:	a1 e3       	ldi	r26, 0x31	; 49
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e1 e3       	ldi	r30, 0x31	; 49
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	98 2f       	mov	r25, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	80 95       	com	r24
     f3a:	89 23       	and	r24, r25
     f3c:	8c 93       	st	X, r24

					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTD |= au8_pin;
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	90 81       	ld	r25, Z
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	89 2b       	or	r24, r25
     f4c:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
     f4e:	2d 96       	adiw	r28, 0x0d	; 13
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <mdio_setPinValue>:

void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_value)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	2d 97       	sbiw	r28, 0x0d	; 13
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	6a 83       	std	Y+2, r22	; 0x02
     f78:	4b 83       	std	Y+3, r20	; 0x03
	/*Switching over DIO Ports*/
	switch(au8_port)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3d 87       	std	Y+13, r19	; 0x0d
     f82:	2c 87       	std	Y+12, r18	; 0x0c
     f84:	8c 85       	ldd	r24, Y+12	; 0x0c
     f86:	9d 85       	ldd	r25, Y+13	; 0x0d
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	91 05       	cpc	r25, r1
     f8c:	d9 f1       	breq	.+118    	; 0x1004 <mdio_setPinValue+0xa4>
     f8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f90:	3d 85       	ldd	r19, Y+13	; 0x0d
     f92:	23 30       	cpi	r18, 0x03	; 3
     f94:	31 05       	cpc	r19, r1
     f96:	34 f4       	brge	.+12     	; 0xfa4 <mdio_setPinValue+0x44>
     f98:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	71 f0       	breq	.+28     	; 0xfbe <mdio_setPinValue+0x5e>
     fa2:	96 c0       	rjmp	.+300    	; 0x10d0 <mdio_setPinValue+0x170>
     fa4:	2c 85       	ldd	r18, Y+12	; 0x0c
     fa6:	3d 85       	ldd	r19, Y+13	; 0x0d
     fa8:	23 30       	cpi	r18, 0x03	; 3
     faa:	31 05       	cpc	r19, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <mdio_setPinValue+0x50>
     fae:	4d c0       	rjmp	.+154    	; 0x104a <mdio_setPinValue+0xea>
     fb0:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb2:	9d 85       	ldd	r25, Y+13	; 0x0d
     fb4:	84 30       	cpi	r24, 0x04	; 4
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <mdio_setPinValue+0x5c>
     fba:	69 c0       	rjmp	.+210    	; 0x108e <mdio_setPinValue+0x12e>
     fbc:	89 c0       	rjmp	.+274    	; 0x10d0 <mdio_setPinValue+0x170>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Switching over pin value*/
			switch(au8_value)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3b 87       	std	Y+11, r19	; 0x0b
     fc6:	2a 87       	std	Y+10, r18	; 0x0a
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	79 f0       	breq	.+30     	; 0xfee <mdio_setPinValue+0x8e>
     fd0:	2a 85       	ldd	r18, Y+10	; 0x0a
     fd2:	3b 85       	ldd	r19, Y+11	; 0x0b
     fd4:	21 30       	cpi	r18, 0x01	; 1
     fd6:	31 05       	cpc	r19, r1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <mdio_setPinValue+0x7c>
     fda:	7a c0       	rjmp	.+244    	; 0x10d0 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTA |= au8_pin;
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	90 81       	ld	r25, Z
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	89 2b       	or	r24, r25
     fea:	8c 93       	st	X, r24
     fec:	71 c0       	rjmp	.+226    	; 0x10d0 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTA &= ~au8_pin;
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	98 2f       	mov	r25, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	80 95       	com	r24
     ffe:	89 23       	and	r24, r25
    1000:	8c 93       	st	X, r24
    1002:	66 c0       	rjmp	.+204    	; 0x10d0 <mdio_setPinValue+0x170>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Switching over pin value*/
			switch(au8_value)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	39 87       	std	Y+9, r19	; 0x09
    100c:	28 87       	std	Y+8, r18	; 0x08
    100e:	88 85       	ldd	r24, Y+8	; 0x08
    1010:	99 85       	ldd	r25, Y+9	; 0x09
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	79 f0       	breq	.+30     	; 0x1034 <mdio_setPinValue+0xd4>
    1016:	28 85       	ldd	r18, Y+8	; 0x08
    1018:	39 85       	ldd	r19, Y+9	; 0x09
    101a:	21 30       	cpi	r18, 0x01	; 1
    101c:	31 05       	cpc	r19, r1
    101e:	09 f0       	breq	.+2      	; 0x1022 <mdio_setPinValue+0xc2>
    1020:	57 c0       	rjmp	.+174    	; 0x10d0 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTB |= au8_pin;
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	90 81       	ld	r25, Z
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	89 2b       	or	r24, r25
    1030:	8c 93       	st	X, r24
    1032:	4e c0       	rjmp	.+156    	; 0x10d0 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTB &= ~au8_pin;
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	98 2f       	mov	r25, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 95       	com	r24
    1044:	89 23       	and	r24, r25
    1046:	8c 93       	st	X, r24
    1048:	43 c0       	rjmp	.+134    	; 0x10d0 <mdio_setPinValue+0x170>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Switching over pin value*/
			switch(au8_value)
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	3f 83       	std	Y+7, r19	; 0x07
    1052:	2e 83       	std	Y+6, r18	; 0x06
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	71 f0       	breq	.+28     	; 0x1078 <mdio_setPinValue+0x118>
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	21 30       	cpi	r18, 0x01	; 1
    1062:	31 05       	cpc	r19, r1
    1064:	a9 f5       	brne	.+106    	; 0x10d0 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTC |= au8_pin;
    1066:	a5 e3       	ldi	r26, 0x35	; 53
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	90 81       	ld	r25, Z
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	89 2b       	or	r24, r25
    1074:	8c 93       	st	X, r24
    1076:	2c c0       	rjmp	.+88     	; 0x10d0 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTC &= ~au8_pin;
    1078:	a5 e3       	ldi	r26, 0x35	; 53
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e3       	ldi	r30, 0x35	; 53
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	98 2f       	mov	r25, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 95       	com	r24
    1088:	89 23       	and	r24, r25
    108a:	8c 93       	st	X, r24
    108c:	21 c0       	rjmp	.+66     	; 0x10d0 <mdio_setPinValue+0x170>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Switching over pin value*/
			switch(au8_value)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3d 83       	std	Y+5, r19	; 0x05
    1096:	2c 83       	std	Y+4, r18	; 0x04
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	71 f0       	breq	.+28     	; 0x10bc <mdio_setPinValue+0x15c>
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	3d 81       	ldd	r19, Y+5	; 0x05
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	99 f4       	brne	.+38     	; 0x10d0 <mdio_setPinValue+0x170>
			{
				/*In case of choosing high*/
				case HIGH:

					/*Setting specific DIO pins to high*/
					MDIO_PORTD |= au8_pin;
    10aa:	a2 e3       	ldi	r26, 0x32	; 50
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e3       	ldi	r30, 0x32	; 50
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	90 81       	ld	r25, Z
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	89 2b       	or	r24, r25
    10b8:	8c 93       	st	X, r24
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <mdio_setPinValue+0x170>

				/*In case of choosing low*/
				case LOW:

					/*Setting specific DIO pins to low*/
					MDIO_PORTD &= ~au8_pin;
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	98 2f       	mov	r25, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 95       	com	r24
    10cc:	89 23       	and	r24, r25
    10ce:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    10d0:	2d 96       	adiw	r28, 0x0d	; 13
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <mdio_togglePinValue>:

void mdio_togglePinValue(u8_t au8_port, u8_t au8_pin)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <mdio_togglePinValue+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <mdio_togglePinValue+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
	/*Switching over DIO Ports*/
	switch(au8_port)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3c 83       	std	Y+4, r19	; 0x04
    10fa:	2b 83       	std	Y+3, r18	; 0x03
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	91 05       	cpc	r25, r1
    1104:	f9 f0       	breq	.+62     	; 0x1144 <mdio_togglePinValue+0x62>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	23 30       	cpi	r18, 0x03	; 3
    110c:	31 05       	cpc	r19, r1
    110e:	34 f4       	brge	.+12     	; 0x111c <mdio_togglePinValue+0x3a>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	61 f0       	breq	.+24     	; 0x1132 <mdio_togglePinValue+0x50>
    111a:	2e c0       	rjmp	.+92     	; 0x1178 <mdio_togglePinValue+0x96>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	23 30       	cpi	r18, 0x03	; 3
    1122:	31 05       	cpc	r19, r1
    1124:	c1 f0       	breq	.+48     	; 0x1156 <mdio_togglePinValue+0x74>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	91 05       	cpc	r25, r1
    112e:	e1 f0       	breq	.+56     	; 0x1168 <mdio_togglePinValue+0x86>
    1130:	23 c0       	rjmp	.+70     	; 0x1178 <mdio_togglePinValue+0x96>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Toggling specific DIO pins*/
			MDIO_PORTA ^= au8_pin;
    1132:	ab e3       	ldi	r26, 0x3B	; 59
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	90 81       	ld	r25, Z
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	89 27       	eor	r24, r25
    1140:	8c 93       	st	X, r24
    1142:	1a c0       	rjmp	.+52     	; 0x1178 <mdio_togglePinValue+0x96>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Toggling specific DIO pins*/
			MDIO_PORTB ^= au8_pin;
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	90 81       	ld	r25, Z
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	89 27       	eor	r24, r25
    1152:	8c 93       	st	X, r24
    1154:	11 c0       	rjmp	.+34     	; 0x1178 <mdio_togglePinValue+0x96>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Toggling specific DIO pins*/
			MDIO_PORTC ^= au8_pin;
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	90 81       	ld	r25, Z
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	89 27       	eor	r24, r25
    1164:	8c 93       	st	X, r24
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <mdio_togglePinValue+0x96>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Toggling specific DIO pins*/
			MDIO_PORTD ^= au8_pin;
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	90 81       	ld	r25, Z
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	89 27       	eor	r24, r25
    1176:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <mdio_getPinValue>:

u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <mdio_getPinValue+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <mdio_getPinValue+0x8>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable used to get a specific pin value*/
	u8_t au8_pinValue = 0;
    1198:	19 82       	std	Y+1, r1	; 0x01

	/*Switching over DIO Ports*/
	switch(au8_port)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3d 83       	std	Y+5, r19	; 0x05
    11a2:	2c 83       	std	Y+4, r18	; 0x04
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	91 05       	cpc	r25, r1
    11ac:	11 f1       	breq	.+68     	; 0x11f2 <mdio_getPinValue+0x6c>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	23 30       	cpi	r18, 0x03	; 3
    11b4:	31 05       	cpc	r19, r1
    11b6:	34 f4       	brge	.+12     	; 0x11c4 <mdio_getPinValue+0x3e>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	61 f0       	breq	.+24     	; 0x11da <mdio_getPinValue+0x54>
    11c2:	3a c0       	rjmp	.+116    	; 0x1238 <mdio_getPinValue+0xb2>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	23 30       	cpi	r18, 0x03	; 3
    11ca:	31 05       	cpc	r19, r1
    11cc:	f1 f0       	breq	.+60     	; 0x120a <mdio_getPinValue+0x84>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	91 05       	cpc	r25, r1
    11d6:	29 f1       	breq	.+74     	; 0x1222 <mdio_getPinValue+0x9c>
    11d8:	2f c0       	rjmp	.+94     	; 0x1238 <mdio_getPinValue+0xb2>
	{
		/*In case of choosing PORTA*/
		case PORTA:

			/*Checking a specific pin value*/
			if(MDIO_PINA & au8_pin)
    11da:	e9 e3       	ldi	r30, 0x39	; 57
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	90 81       	ld	r25, Z
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	89 23       	and	r24, r25
    11e4:	88 23       	and	r24, r24
    11e6:	19 f0       	breq	.+6      	; 0x11ee <mdio_getPinValue+0x68>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	25 c0       	rjmp	.+74     	; 0x1238 <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    11ee:	19 82       	std	Y+1, r1	; 0x01
    11f0:	23 c0       	rjmp	.+70     	; 0x1238 <mdio_getPinValue+0xb2>

		/*In case of choosing PORTB*/
		case PORTB:

			/*Checking a specific pin value*/
			if(MDIO_PINB & au8_pin)
    11f2:	e6 e3       	ldi	r30, 0x36	; 54
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	90 81       	ld	r25, Z
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	89 23       	and	r24, r25
    11fc:	88 23       	and	r24, r24
    11fe:	19 f0       	breq	.+6      	; 0x1206 <mdio_getPinValue+0x80>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	19 c0       	rjmp	.+50     	; 0x1238 <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	17 c0       	rjmp	.+46     	; 0x1238 <mdio_getPinValue+0xb2>

		/*In case of choosing PORTC*/
		case PORTC:

			/*Checking a specific pin value*/
			if(MDIO_PINC & au8_pin)
    120a:	e3 e3       	ldi	r30, 0x33	; 51
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	90 81       	ld	r25, Z
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	89 23       	and	r24, r25
    1214:	88 23       	and	r24, r24
    1216:	19 f0       	breq	.+6      	; 0x121e <mdio_getPinValue+0x98>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	0b c0       	rjmp	.+22     	; 0x1238 <mdio_getPinValue+0xb2>

		/*In case of choosing PORTD*/
		case PORTD:

			/*Checking a specific pin value*/
			if(MDIO_PIND & au8_pin)
    1222:	e0 e3       	ldi	r30, 0x30	; 48
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	90 81       	ld	r25, Z
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	89 23       	and	r24, r25
    122c:	88 23       	and	r24, r24
    122e:	19 f0       	breq	.+6      	; 0x1236 <mdio_getPinValue+0xb0>
			{
				/*Setting the pin value to high*/
				au8_pinValue = HIGH;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <mdio_getPinValue+0xb2>
			}
			else
			{
				/*Setting the pin value to low*/
				au8_pinValue = LOW;
    1236:	19 82       	std	Y+1, r1	; 0x01
			/*Break from default case*/
			break;
	}

	/*Return the current pin value*/
	return au8_pinValue;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <MGIE_VidEnableGIE>:
#include  "MGIE_Private.h"
#include  "MGIE_Interface.h"


void MGIE_VidEnableGIE()
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1252:	af e5       	ldi	r26, 0x5F	; 95
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ef e5       	ldi	r30, 0x5F	; 95
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 68       	ori	r24, 0x80	; 128
    125e:	8c 93       	st	X, r24
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <MGIE_VidDisableGIE>:

void MGIE_VidDisableGIE()
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,7);
    126e:	af e5       	ldi	r26, 0x5F	; 95
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ef e5       	ldi	r30, 0x5F	; 95
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MTIMER0_VidInit>:


void (*FuncToSet)(void)=0;

void MTIMER0_VidInit(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	TCNT0=192;
    128a:	ec e5       	ldi	r30, 0x5C	; 92
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 ec       	ldi	r24, 0xC0	; 192
    1290:	80 83       	st	Z, r24

	SET_BIT(TCCR0,3);
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e3 e5       	ldi	r30, 0x53	; 83
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 60       	ori	r24, 0x08	; 8
    129e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    12a0:	a3 e5       	ldi	r26, 0x53	; 83
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e3 e5       	ldi	r30, 0x53	; 83
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 64       	ori	r24, 0x40	; 64
    12ac:	8c 93       	st	X, r24

	SET_BIT(TIMSK,0);
    12ae:	a9 e5       	ldi	r26, 0x59	; 89
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e9 e5       	ldi	r30, 0x59	; 89
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	81 60       	ori	r24, 0x01	; 1
    12ba:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,0);
    12bc:	a3 e5       	ldi	r26, 0x53	; 83
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e3 e5       	ldi	r30, 0x53	; 83
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8e 7f       	andi	r24, 0xFE	; 254
    12c8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    12ca:	a3 e5       	ldi	r26, 0x53	; 83
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e3 e5       	ldi	r30, 0x53	; 83
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	82 60       	ori	r24, 0x02	; 2
    12d6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,2);
    12d8:	a3 e5       	ldi	r26, 0x53	; 83
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e3 e5       	ldi	r30, 0x53	; 83
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8b 7f       	andi	r24, 0xFB	; 251
    12e4:	8c 93       	st	X, r24

}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <MTIMER0_CallBack>:

void MTIMER0_CallBack(void (*func)(void))
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <MTIMER0_CallBack+0x6>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
	FuncToSet=func;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	90 93 69 00 	sts	0x0069, r25
    1302:	80 93 68 00 	sts	0x0068, r24
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <__vector_11>:

void __vector_11(void)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	if(FuncToSet !=0)
    133a:	80 91 68 00 	lds	r24, 0x0068
    133e:	90 91 69 00 	lds	r25, 0x0069
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	29 f0       	breq	.+10     	; 0x1350 <__vector_11+0x40>
		FuncToSet();
    1346:	e0 91 68 00 	lds	r30, 0x0068
    134a:	f0 91 69 00 	lds	r31, 0x0069
    134e:	09 95       	icall
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <MUART_Init>:
#include "MUART_private.h"
#include "LBIT_MATH.h"
#include "LSTD_TYPES.h"

void MUART_Init(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62

   u8_t local_UCSRC = 0x00 ;
    1380:	19 82       	std	Y+1, r1	; 0x01
   SET_BIT(local_UCSRC , 7 ) ;  //select UCSRC
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	89 83       	std	Y+1, r24	; 0x01
    // one - stop bit
   CLEAR_BIT(local_UCSRC,USBS) ;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	89 83       	std	Y+1, r24	; 0x01
   //No parity
   CLEAR_BIT(local_UCSRC , UPM0) ;
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	8f 7e       	andi	r24, 0xEF	; 239
    1392:	89 83       	std	Y+1, r24	; 0x01
   CLEAR_BIT(local_UCSRC , UPM1) ;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	8f 7d       	andi	r24, 0xDF	; 223
    1398:	89 83       	std	Y+1, r24	; 0x01
   // Asynchronous
   CLEAR_BIT(local_UCSRC , UMSEL);
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	8f 7b       	andi	r24, 0xBF	; 191
    139e:	89 83       	std	Y+1, r24	; 0x01
   //8-bit data
   SET_BIT(local_UCSRC ,  UCSZ0 ) ;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	82 60       	ori	r24, 0x02	; 2
    13a4:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(local_UCSRC ,  UCSZ1 ) ;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	84 60       	ori	r24, 0x04	; 4
    13aa:	89 83       	std	Y+1, r24	; 0x01
   CLEAR_BIT(UCSRB , UCSZ2);
    13ac:	aa e2       	ldi	r26, 0x2A	; 42
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ea e2       	ldi	r30, 0x2A	; 42
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8b 7f       	andi	r24, 0xFB	; 251
    13b8:	8c 93       	st	X, r24
   //No interrupt
   UCSRB &= 0x04 ;
    13ba:	aa e2       	ldi	r26, 0x2A	; 42
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ea e2       	ldi	r30, 0x2A	; 42
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	84 70       	andi	r24, 0x04	; 4
    13c6:	8c 93       	st	X, r24
   //Setting UCSEC
   UCSRC = local_UCSRC ;
    13c8:	e0 e4       	ldi	r30, 0x40	; 64
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	80 83       	st	Z, r24
   local_UCSRC = 0x00 ;
    13d0:	19 82       	std	Y+1, r1	; 0x01
   //baud rate 9600
   CLEAR_BIT(local_UCSRC , 7 );  //select UBRRH
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	8f 77       	andi	r24, 0x7F	; 127
    13d6:	89 83       	std	Y+1, r24	; 0x01
   UBRRL = 51 ;
    13d8:	e9 e2       	ldi	r30, 0x29	; 41
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	83 e3       	ldi	r24, 0x33	; 51
    13de:	80 83       	st	Z, r24
   //Enable Uart Protocol
   SET_BIT(UCSRB , TXEN);
    13e0:	aa e2       	ldi	r26, 0x2A	; 42
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ea e2       	ldi	r30, 0x2A	; 42
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	88 60       	ori	r24, 0x08	; 8
    13ec:	8c 93       	st	X, r24
   SET_BIT(UCSRB , RXEN);
    13ee:	aa e2       	ldi	r26, 0x2A	; 42
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ea e2       	ldi	r30, 0x2A	; 42
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 61       	ori	r24, 0x10	; 16
    13fa:	8c 93       	st	X, r24
}
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <MUART_Send_Data>:


void MUART_Send_Data(u8_t data)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	89 83       	std	Y+1, r24	; 0x01
	 while(!GET_BIT(UCSRA , UDRE)) ;
    1410:	eb e2       	ldi	r30, 0x2B	; 43
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	82 95       	swap	r24
    1418:	86 95       	lsr	r24
    141a:	87 70       	andi	r24, 0x07	; 7
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	90 70       	andi	r25, 0x00	; 0
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	a1 f3       	breq	.-24     	; 0x1410 <MUART_Send_Data+0xc>
	 UDR = data ;
    1428:	ec e2       	ldi	r30, 0x2C	; 44
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	80 83       	st	Z, r24
   return ;
}
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <MUART_Recieve_Data>:


u8_t MUART_Recieve_Data(void)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
	u8_t data ;
	while(!GET_BIT(UCSRA , RXC)) ;
    1442:	eb e2       	ldi	r30, 0x2B	; 43
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 23       	and	r24, r24
    144a:	dc f7       	brge	.-10     	; 0x1442 <MUART_Recieve_Data+0xa>
	data = UDR ;
    144c:	ec e2       	ldi	r30, 0x2C	; 44
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	89 83       	std	Y+1, r24	; 0x01
	return data ;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
}
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <stepper_init>:
#include "util/delay.h"

u8_t flag=0;
/*this function used to initialize stepper motor*/
void stepper_init(void)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
	mdio_setPinStatus(PORTC, (PIN4 | PIN5 | PIN6 | PIN7), OUTPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	60 ef       	ldi	r22, 0xF0	; 240
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>
	mdio_setPinValue(PORTC,  (PIN4 | PIN5 | PIN6 | PIN7), LOW);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	60 ef       	ldi	r22, 0xF0	; 240
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
			return;
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <forward>:
/*this function used to make motor run in forward direction*/
void forward(void)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	e8 97       	sbiw	r28, 0x38	; 56
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
	    mdio_setPinValue(PORTC, PIN4, HIGH);
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	60 e1       	ldi	r22, 0x10	; 16
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, LOW);
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	60 e2       	ldi	r22, 0x20	; 32
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, LOW);
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	60 e4       	ldi	r22, 0x40	; 64
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, LOW);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	60 e8       	ldi	r22, 0x80	; 128
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a8 ec       	ldi	r26, 0xC8	; 200
    14c2:	b2 e4       	ldi	r27, 0x42	; 66
    14c4:	8d ab       	std	Y+53, r24	; 0x35
    14c6:	9e ab       	std	Y+54, r25	; 0x36
    14c8:	af ab       	std	Y+55, r26	; 0x37
    14ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	6d a9       	ldd	r22, Y+53	; 0x35
    14ce:	7e a9       	ldd	r23, Y+54	; 0x36
    14d0:	8f a9       	ldd	r24, Y+55	; 0x37
    14d2:	98 ad       	ldd	r25, Y+56	; 0x38
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a ef       	ldi	r20, 0xFA	; 250
    14da:	54 e4       	ldi	r21, 0x44	; 68
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	89 ab       	std	Y+49, r24	; 0x31
    14e6:	9a ab       	std	Y+50, r25	; 0x32
    14e8:	ab ab       	std	Y+51, r26	; 0x33
    14ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ec:	69 a9       	ldd	r22, Y+49	; 0x31
    14ee:	7a a9       	ldd	r23, Y+50	; 0x32
    14f0:	8b a9       	ldd	r24, Y+51	; 0x33
    14f2:	9c a9       	ldd	r25, Y+52	; 0x34
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e8       	ldi	r20, 0x80	; 128
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1500:	88 23       	and	r24, r24
    1502:	2c f4       	brge	.+10     	; 0x150e <forward+0x8e>
		__ticks = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	98 ab       	std	Y+48, r25	; 0x30
    150a:	8f a7       	std	Y+47, r24	; 0x2f
    150c:	3f c0       	rjmp	.+126    	; 0x158c <forward+0x10c>
	else if (__tmp > 65535)
    150e:	69 a9       	ldd	r22, Y+49	; 0x31
    1510:	7a a9       	ldd	r23, Y+50	; 0x32
    1512:	8b a9       	ldd	r24, Y+51	; 0x33
    1514:	9c a9       	ldd	r25, Y+52	; 0x34
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	4c f5       	brge	.+82     	; 0x1578 <forward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	6d a9       	ldd	r22, Y+53	; 0x35
    1528:	7e a9       	ldd	r23, Y+54	; 0x36
    152a:	8f a9       	ldd	r24, Y+55	; 0x37
    152c:	98 ad       	ldd	r25, Y+56	; 0x38
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	98 ab       	std	Y+48, r25	; 0x30
    154c:	8f a7       	std	Y+47, r24	; 0x2f
    154e:	0f c0       	rjmp	.+30     	; 0x156e <forward+0xee>
    1550:	88 ec       	ldi	r24, 0xC8	; 200
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9e a7       	std	Y+46, r25	; 0x2e
    1556:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1558:	8d a5       	ldd	r24, Y+45	; 0x2d
    155a:	9e a5       	ldd	r25, Y+46	; 0x2e
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <forward+0xdc>
    1560:	9e a7       	std	Y+46, r25	; 0x2e
    1562:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1564:	8f a5       	ldd	r24, Y+47	; 0x2f
    1566:	98 a9       	ldd	r25, Y+48	; 0x30
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	98 ab       	std	Y+48, r25	; 0x30
    156c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1570:	98 a9       	ldd	r25, Y+48	; 0x30
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	69 f7       	brne	.-38     	; 0x1550 <forward+0xd0>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <forward+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1578:	69 a9       	ldd	r22, Y+49	; 0x31
    157a:	7a a9       	ldd	r23, Y+50	; 0x32
    157c:	8b a9       	ldd	r24, Y+51	; 0x33
    157e:	9c a9       	ldd	r25, Y+52	; 0x34
    1580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	98 ab       	std	Y+48, r25	; 0x30
    158a:	8f a7       	std	Y+47, r24	; 0x2f
    158c:	8f a5       	ldd	r24, Y+47	; 0x2f
    158e:	98 a9       	ldd	r25, Y+48	; 0x30
    1590:	9c a7       	std	Y+44, r25	; 0x2c
    1592:	8b a7       	std	Y+43, r24	; 0x2b
    1594:	8b a5       	ldd	r24, Y+43	; 0x2b
    1596:	9c a5       	ldd	r25, Y+44	; 0x2c
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <forward+0x118>
    159c:	9c a7       	std	Y+44, r25	; 0x2c
    159e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		mdio_setPinValue(PORTC, PIN4, LOW);
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	60 e1       	ldi	r22, 0x10	; 16
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, HIGH);
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	60 e2       	ldi	r22, 0x20	; 32
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, LOW);
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	60 e4       	ldi	r22, 0x40	; 64
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, LOW);
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	60 e8       	ldi	r22, 0x80	; 128
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a8 ec       	ldi	r26, 0xC8	; 200
    15ce:	b2 e4       	ldi	r27, 0x42	; 66
    15d0:	8f a3       	std	Y+39, r24	; 0x27
    15d2:	98 a7       	std	Y+40, r25	; 0x28
    15d4:	a9 a7       	std	Y+41, r26	; 0x29
    15d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	6f a1       	ldd	r22, Y+39	; 0x27
    15da:	78 a5       	ldd	r23, Y+40	; 0x28
    15dc:	89 a5       	ldd	r24, Y+41	; 0x29
    15de:	9a a5       	ldd	r25, Y+42	; 0x2a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a ef       	ldi	r20, 0xFA	; 250
    15e6:	54 e4       	ldi	r21, 0x44	; 68
    15e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8b a3       	std	Y+35, r24	; 0x23
    15f2:	9c a3       	std	Y+36, r25	; 0x24
    15f4:	ad a3       	std	Y+37, r26	; 0x25
    15f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15f8:	6b a1       	ldd	r22, Y+35	; 0x23
    15fa:	7c a1       	ldd	r23, Y+36	; 0x24
    15fc:	8d a1       	ldd	r24, Y+37	; 0x25
    15fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <forward+0x19a>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9a a3       	std	Y+34, r25	; 0x22
    1616:	89 a3       	std	Y+33, r24	; 0x21
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <forward+0x218>
	else if (__tmp > 65535)
    161a:	6b a1       	ldd	r22, Y+35	; 0x23
    161c:	7c a1       	ldd	r23, Y+36	; 0x24
    161e:	8d a1       	ldd	r24, Y+37	; 0x25
    1620:	9e a1       	ldd	r25, Y+38	; 0x26
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <forward+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	6f a1       	ldd	r22, Y+39	; 0x27
    1634:	78 a5       	ldd	r23, Y+40	; 0x28
    1636:	89 a5       	ldd	r24, Y+41	; 0x29
    1638:	9a a5       	ldd	r25, Y+42	; 0x2a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9a a3       	std	Y+34, r25	; 0x22
    1658:	89 a3       	std	Y+33, r24	; 0x21
    165a:	0f c0       	rjmp	.+30     	; 0x167a <forward+0x1fa>
    165c:	88 ec       	ldi	r24, 0xC8	; 200
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	98 a3       	std	Y+32, r25	; 0x20
    1662:	8f 8f       	std	Y+31, r24	; 0x1f
    1664:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1666:	98 a1       	ldd	r25, Y+32	; 0x20
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <forward+0x1e8>
    166c:	98 a3       	std	Y+32, r25	; 0x20
    166e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	89 a1       	ldd	r24, Y+33	; 0x21
    1672:	9a a1       	ldd	r25, Y+34	; 0x22
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9a a3       	std	Y+34, r25	; 0x22
    1678:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	89 a1       	ldd	r24, Y+33	; 0x21
    167c:	9a a1       	ldd	r25, Y+34	; 0x22
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <forward+0x1dc>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <forward+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6b a1       	ldd	r22, Y+35	; 0x23
    1686:	7c a1       	ldd	r23, Y+36	; 0x24
    1688:	8d a1       	ldd	r24, Y+37	; 0x25
    168a:	9e a1       	ldd	r25, Y+38	; 0x26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
    1698:	89 a1       	ldd	r24, Y+33	; 0x21
    169a:	9a a1       	ldd	r25, Y+34	; 0x22
    169c:	9e 8f       	std	Y+30, r25	; 0x1e
    169e:	8d 8f       	std	Y+29, r24	; 0x1d
    16a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <forward+0x224>
    16a8:	9e 8f       	std	Y+30, r25	; 0x1e
    16aa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		mdio_setPinValue(PORTC, PIN4, LOW);
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	60 e1       	ldi	r22, 0x10	; 16
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, LOW);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	60 e2       	ldi	r22, 0x20	; 32
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, HIGH);
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	60 e4       	ldi	r22, 0x40	; 64
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, LOW);
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	60 e8       	ldi	r22, 0x80	; 128
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a8 ec       	ldi	r26, 0xC8	; 200
    16da:	b2 e4       	ldi	r27, 0x42	; 66
    16dc:	89 8f       	std	Y+25, r24	; 0x19
    16de:	9a 8f       	std	Y+26, r25	; 0x1a
    16e0:	ab 8f       	std	Y+27, r26	; 0x1b
    16e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	69 8d       	ldd	r22, Y+25	; 0x19
    16e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a ef       	ldi	r20, 0xFA	; 250
    16f2:	54 e4       	ldi	r21, 0x44	; 68
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	8d 8b       	std	Y+21, r24	; 0x15
    16fe:	9e 8b       	std	Y+22, r25	; 0x16
    1700:	af 8b       	std	Y+23, r26	; 0x17
    1702:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1704:	6d 89       	ldd	r22, Y+21	; 0x15
    1706:	7e 89       	ldd	r23, Y+22	; 0x16
    1708:	8f 89       	ldd	r24, Y+23	; 0x17
    170a:	98 8d       	ldd	r25, Y+24	; 0x18
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <forward+0x2a6>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9c 8b       	std	Y+20, r25	; 0x14
    1722:	8b 8b       	std	Y+19, r24	; 0x13
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <forward+0x324>
	else if (__tmp > 65535)
    1726:	6d 89       	ldd	r22, Y+21	; 0x15
    1728:	7e 89       	ldd	r23, Y+22	; 0x16
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	98 8d       	ldd	r25, Y+24	; 0x18
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <forward+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	69 8d       	ldd	r22, Y+25	; 0x19
    1740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9c 8b       	std	Y+20, r25	; 0x14
    1764:	8b 8b       	std	Y+19, r24	; 0x13
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <forward+0x306>
    1768:	88 ec       	ldi	r24, 0xC8	; 200
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9a 8b       	std	Y+18, r25	; 0x12
    176e:	89 8b       	std	Y+17, r24	; 0x11
    1770:	89 89       	ldd	r24, Y+17	; 0x11
    1772:	9a 89       	ldd	r25, Y+18	; 0x12
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <forward+0x2f4>
    1778:	9a 8b       	std	Y+18, r25	; 0x12
    177a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	8b 89       	ldd	r24, Y+19	; 0x13
    177e:	9c 89       	ldd	r25, Y+20	; 0x14
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9c 8b       	std	Y+20, r25	; 0x14
    1784:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	8b 89       	ldd	r24, Y+19	; 0x13
    1788:	9c 89       	ldd	r25, Y+20	; 0x14
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <forward+0x2e8>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <forward+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	6d 89       	ldd	r22, Y+21	; 0x15
    1792:	7e 89       	ldd	r23, Y+22	; 0x16
    1794:	8f 89       	ldd	r24, Y+23	; 0x17
    1796:	98 8d       	ldd	r25, Y+24	; 0x18
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9c 8b       	std	Y+20, r25	; 0x14
    17a2:	8b 8b       	std	Y+19, r24	; 0x13
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	98 8b       	std	Y+16, r25	; 0x10
    17aa:	8f 87       	std	Y+15, r24	; 0x0f
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	98 89       	ldd	r25, Y+16	; 0x10
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <forward+0x330>
    17b4:	98 8b       	std	Y+16, r25	; 0x10
    17b6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		mdio_setPinValue(PORTC, PIN4, LOW);
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	60 e1       	ldi	r22, 0x10	; 16
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, LOW);
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	60 e2       	ldi	r22, 0x20	; 32
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, LOW);
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	60 e4       	ldi	r22, 0x40	; 64
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, HIGH);
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	60 e8       	ldi	r22, 0x80	; 128
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a8 ec       	ldi	r26, 0xC8	; 200
    17e6:	b2 e4       	ldi	r27, 0x42	; 66
    17e8:	8b 87       	std	Y+11, r24	; 0x0b
    17ea:	9c 87       	std	Y+12, r25	; 0x0c
    17ec:	ad 87       	std	Y+13, r26	; 0x0d
    17ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8f 83       	std	Y+7, r24	; 0x07
    180a:	98 87       	std	Y+8, r25	; 0x08
    180c:	a9 87       	std	Y+9, r26	; 0x09
    180e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <forward+0x3b2>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <forward+0x430>
	else if (__tmp > 65535)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <forward+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6b 85       	ldd	r22, Y+11	; 0x0b
    184c:	7c 85       	ldd	r23, Y+12	; 0x0c
    184e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1850:	9e 85       	ldd	r25, Y+14	; 0x0e
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <forward+0x412>
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <forward+0x400>
    1884:	9c 83       	std	Y+4, r25	; 0x04
    1886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <forward+0x3f4>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <forward+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <forward+0x43c>
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

   return;
}
    18c4:	e8 96       	adiw	r28, 0x38	; 56
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <reverse>:
/*this function used to make motor run in reverse direction*/
void reverse(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	e8 97       	sbiw	r28, 0x38	; 56
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
	    mdio_setPinValue(PORTC, PIN4, LOW);
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	60 e1       	ldi	r22, 0x10	; 16
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, LOW);
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	60 e2       	ldi	r22, 0x20	; 32
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, LOW);
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	60 e4       	ldi	r22, 0x40	; 64
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, HIGH);
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	60 e8       	ldi	r22, 0x80	; 128
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a8 ec       	ldi	r26, 0xC8	; 200
    1918:	b2 e4       	ldi	r27, 0x42	; 66
    191a:	8d ab       	std	Y+53, r24	; 0x35
    191c:	9e ab       	std	Y+54, r25	; 0x36
    191e:	af ab       	std	Y+55, r26	; 0x37
    1920:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6d a9       	ldd	r22, Y+53	; 0x35
    1924:	7e a9       	ldd	r23, Y+54	; 0x36
    1926:	8f a9       	ldd	r24, Y+55	; 0x37
    1928:	98 ad       	ldd	r25, Y+56	; 0x38
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	89 ab       	std	Y+49, r24	; 0x31
    193c:	9a ab       	std	Y+50, r25	; 0x32
    193e:	ab ab       	std	Y+51, r26	; 0x33
    1940:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1942:	69 a9       	ldd	r22, Y+49	; 0x31
    1944:	7a a9       	ldd	r23, Y+50	; 0x32
    1946:	8b a9       	ldd	r24, Y+51	; 0x33
    1948:	9c a9       	ldd	r25, Y+52	; 0x34
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <reverse+0x8e>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	98 ab       	std	Y+48, r25	; 0x30
    1960:	8f a7       	std	Y+47, r24	; 0x2f
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <reverse+0x10c>
	else if (__tmp > 65535)
    1964:	69 a9       	ldd	r22, Y+49	; 0x31
    1966:	7a a9       	ldd	r23, Y+50	; 0x32
    1968:	8b a9       	ldd	r24, Y+51	; 0x33
    196a:	9c a9       	ldd	r25, Y+52	; 0x34
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <reverse+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6d a9       	ldd	r22, Y+53	; 0x35
    197e:	7e a9       	ldd	r23, Y+54	; 0x36
    1980:	8f a9       	ldd	r24, Y+55	; 0x37
    1982:	98 ad       	ldd	r25, Y+56	; 0x38
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	98 ab       	std	Y+48, r25	; 0x30
    19a2:	8f a7       	std	Y+47, r24	; 0x2f
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <reverse+0xee>
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9e a7       	std	Y+46, r25	; 0x2e
    19ac:	8d a7       	std	Y+45, r24	; 0x2d
    19ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    19b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <reverse+0xdc>
    19b6:	9e a7       	std	Y+46, r25	; 0x2e
    19b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    19bc:	98 a9       	ldd	r25, Y+48	; 0x30
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	98 ab       	std	Y+48, r25	; 0x30
    19c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c6:	98 a9       	ldd	r25, Y+48	; 0x30
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <reverse+0xd0>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <reverse+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
    19e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e4:	98 a9       	ldd	r25, Y+48	; 0x30
    19e6:	9c a7       	std	Y+44, r25	; 0x2c
    19e8:	8b a7       	std	Y+43, r24	; 0x2b
    19ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <reverse+0x118>
    19f2:	9c a7       	std	Y+44, r25	; 0x2c
    19f4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		mdio_setPinValue(PORTC, PIN4, LOW);
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	60 e1       	ldi	r22, 0x10	; 16
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, LOW);
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	60 e2       	ldi	r22, 0x20	; 32
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, HIGH);
    1a0a:	83 e0       	ldi	r24, 0x03	; 3
    1a0c:	60 e4       	ldi	r22, 0x40	; 64
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, LOW);
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	60 e8       	ldi	r22, 0x80	; 128
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a8 ec       	ldi	r26, 0xC8	; 200
    1a24:	b2 e4       	ldi	r27, 0x42	; 66
    1a26:	8f a3       	std	Y+39, r24	; 0x27
    1a28:	98 a7       	std	Y+40, r25	; 0x28
    1a2a:	a9 a7       	std	Y+41, r26	; 0x29
    1a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a30:	78 a5       	ldd	r23, Y+40	; 0x28
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a ef       	ldi	r20, 0xFA	; 250
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8b a3       	std	Y+35, r24	; 0x23
    1a48:	9c a3       	std	Y+36, r25	; 0x24
    1a4a:	ad a3       	std	Y+37, r26	; 0x25
    1a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <reverse+0x19a>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <reverse+0x218>
	else if (__tmp > 65535)
    1a70:	6b a1       	ldd	r22, Y+35	; 0x23
    1a72:	7c a1       	ldd	r23, Y+36	; 0x24
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <reverse+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <reverse+0x1fa>
    1ab2:	88 ec       	ldi	r24, 0xC8	; 200
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abc:	98 a1       	ldd	r25, Y+32	; 0x20
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <reverse+0x1e8>
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <reverse+0x1dc>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <reverse+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6b a1       	ldd	r22, Y+35	; 0x23
    1adc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	9a a1       	ldd	r25, Y+34	; 0x22
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <reverse+0x224>
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		mdio_setPinValue(PORTC, PIN4, LOW);
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	60 e1       	ldi	r22, 0x10	; 16
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, HIGH);
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	60 e2       	ldi	r22, 0x20	; 32
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, LOW);
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	60 e4       	ldi	r22, 0x40	; 64
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, LOW);
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	60 e8       	ldi	r22, 0x80	; 128
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a8 ec       	ldi	r26, 0xC8	; 200
    1b30:	b2 e4       	ldi	r27, 0x42	; 66
    1b32:	89 8f       	std	Y+25, r24	; 0x19
    1b34:	9a 8f       	std	Y+26, r25	; 0x1a
    1b36:	ab 8f       	std	Y+27, r26	; 0x1b
    1b38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	54 e4       	ldi	r21, 0x44	; 68
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8d 8b       	std	Y+21, r24	; 0x15
    1b54:	9e 8b       	std	Y+22, r25	; 0x16
    1b56:	af 8b       	std	Y+23, r26	; 0x17
    1b58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b60:	98 8d       	ldd	r25, Y+24	; 0x18
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <reverse+0x2a6>
		__ticks = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	3f c0       	rjmp	.+126    	; 0x1bfa <reverse+0x324>
	else if (__tmp > 65535)
    1b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b80:	8f 89       	ldd	r24, Y+23	; 0x17
    1b82:	98 8d       	ldd	r25, Y+24	; 0x18
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	4c f5       	brge	.+82     	; 0x1be6 <reverse+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	69 8d       	ldd	r22, Y+25	; 0x19
    1b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <reverse+0x306>
    1bbe:	88 ec       	ldi	r24, 0xC8	; 200
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9a 8b       	std	Y+18, r25	; 0x12
    1bc4:	89 8b       	std	Y+17, r24	; 0x11
    1bc6:	89 89       	ldd	r24, Y+17	; 0x11
    1bc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <reverse+0x2f4>
    1bce:	9a 8b       	std	Y+18, r25	; 0x12
    1bd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9c 8b       	std	Y+20, r25	; 0x14
    1bda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bde:	9c 89       	ldd	r25, Y+20	; 0x14
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <reverse+0x2e8>
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <reverse+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be6:	6d 89       	ldd	r22, Y+21	; 0x15
    1be8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bea:	8f 89       	ldd	r24, Y+23	; 0x17
    1bec:	98 8d       	ldd	r25, Y+24	; 0x18
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	98 8b       	std	Y+16, r25	; 0x10
    1c00:	8f 87       	std	Y+15, r24	; 0x0f
    1c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c04:	98 89       	ldd	r25, Y+16	; 0x10
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <reverse+0x330>
    1c0a:	98 8b       	std	Y+16, r25	; 0x10
    1c0c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		mdio_setPinValue(PORTC, PIN4, HIGH);
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	60 e1       	ldi	r22, 0x10	; 16
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN5, LOW);
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	60 e2       	ldi	r22, 0x20	; 32
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN6, LOW);
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	60 e4       	ldi	r22, 0x40	; 64
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN7, LOW);
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	60 e8       	ldi	r22, 0x80	; 128
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c3c:	b2 e4       	ldi	r27, 0x42	; 66
    1c3e:	8b 87       	std	Y+11, r24	; 0x0b
    1c40:	9c 87       	std	Y+12, r25	; 0x0c
    1c42:	ad 87       	std	Y+13, r26	; 0x0d
    1c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a ef       	ldi	r20, 0xFA	; 250
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8f 83       	std	Y+7, r24	; 0x07
    1c60:	98 87       	std	Y+8, r25	; 0x08
    1c62:	a9 87       	std	Y+9, r26	; 0x09
    1c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <reverse+0x3b2>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <reverse+0x430>
	else if (__tmp > 65535)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	4c f5       	brge	.+82     	; 0x1cf2 <reverse+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <reverse+0x412>
    1cca:	88 ec       	ldi	r24, 0xC8	; 200
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <reverse+0x400>
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	69 f7       	brne	.-38     	; 0x1cca <reverse+0x3f4>
    1cf0:	14 c0       	rjmp	.+40     	; 0x1d1a <reverse+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <reverse+0x43c>
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

	return;
}
    1d1a:	e8 96       	adiw	r28, 0x38	; 56
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <seven_segg>:
/*this function used to count from 60 to zero*/
void seven_segg(void)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	2e 97       	sbiw	r28, 0x0e	; 14
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
	volatile static u8_t i =0;
	volatile static u8_t j =0;

	for(i=0;i<=5;i++)
    1d40:	10 92 6c 00 	sts	0x006C, r1
    1d44:	97 c0       	rjmp	.+302    	; 0x1e74 <seven_segg+0x148>
	 {
		 h7seg_first_displayNumber(5-i);
    1d46:	80 91 6c 00 	lds	r24, 0x006C
    1d4a:	95 e0       	ldi	r25, 0x05	; 5
    1d4c:	29 2f       	mov	r18, r25
    1d4e:	28 1b       	sub	r18, r24
    1d50:	82 2f       	mov	r24, r18
    1d52:	0e 94 af 05 	call	0xb5e	; 0xb5e <h7seg_first_displayNumber>
		 for(j=0;j<=9;j++)
    1d56:	10 92 6b 00 	sts	0x006B, r1
    1d5a:	82 c0       	rjmp	.+260    	; 0x1e60 <seven_segg+0x134>
		 {
			 h7seg_second_displayNumber(9-j);
    1d5c:	90 91 6b 00 	lds	r25, 0x006B
    1d60:	89 e0       	ldi	r24, 0x09	; 9
    1d62:	89 1b       	sub	r24, r25
    1d64:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <h7seg_second_displayNumber>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a8 e4       	ldi	r26, 0x48	; 72
    1d6e:	b3 e4       	ldi	r27, 0x43	; 67
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <seven_segg+0x8e>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <seven_segg+0x10c>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <seven_segg+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <seven_segg+0xee>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <seven_segg+0xdc>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <seven_segg+0xd0>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <seven_segg+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <seven_segg+0x118>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01

			 _delay_ms(200);
			 /*turn on Buzzer*/
			 mdio_setPinValue(PORTD, PIN7,HIGH);
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	60 e8       	ldi	r22, 0x80	; 128
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	volatile static u8_t j =0;

	for(i=0;i<=5;i++)
	 {
		 h7seg_first_displayNumber(5-i);
		 for(j=0;j<=9;j++)
    1e56:	80 91 6b 00 	lds	r24, 0x006B
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	80 93 6b 00 	sts	0x006B, r24
    1e60:	80 91 6b 00 	lds	r24, 0x006B
    1e64:	8a 30       	cpi	r24, 0x0A	; 10
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <seven_segg+0x13e>
    1e68:	79 cf       	rjmp	.-270    	; 0x1d5c <seven_segg+0x30>
void seven_segg(void)
{
	volatile static u8_t i =0;
	volatile static u8_t j =0;

	for(i=0;i<=5;i++)
    1e6a:	80 91 6c 00 	lds	r24, 0x006C
    1e6e:	8f 5f       	subi	r24, 0xFF	; 255
    1e70:	80 93 6c 00 	sts	0x006C, r24
    1e74:	80 91 6c 00 	lds	r24, 0x006C
    1e78:	86 30       	cpi	r24, 0x06	; 6
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <seven_segg+0x152>
    1e7c:	64 cf       	rjmp	.-312    	; 0x1d46 <seven_segg+0x1a>
			 mdio_setPinValue(PORTD, PIN7,HIGH);
		 }

	 }
	/*edit*/
i=0;
    1e7e:	10 92 6c 00 	sts	0x006C, r1
j=0;
    1e82:	10 92 6b 00 	sts	0x006B, r1
	return ;
}
    1e86:	2e 96       	adiw	r28, 0x0e	; 14
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <func>:
void func (void)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	ea 97       	sbiw	r28, 0x3a	; 58
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
	 static u16_t count1 =0;
	 static u16_t count2 =0;
	 static u16_t count3 =0;


	count1++;
    1eac:	80 91 71 00 	lds	r24, 0x0071
    1eb0:	90 91 72 00 	lds	r25, 0x0072
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	90 93 72 00 	sts	0x0072, r25
    1eba:	80 93 71 00 	sts	0x0071, r24
	count2++;
    1ebe:	80 91 6f 00 	lds	r24, 0x006F
    1ec2:	90 91 70 00 	lds	r25, 0x0070
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	90 93 70 00 	sts	0x0070, r25
    1ecc:	80 93 6f 00 	sts	0x006F, r24


	 if(count1 ==400)
    1ed0:	80 91 71 00 	lds	r24, 0x0071
    1ed4:	90 91 72 00 	lds	r25, 0x0072
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	80 39       	cpi	r24, 0x90	; 144
    1edc:	92 07       	cpc	r25, r18
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <func+0x4a>
    1ee0:	88 c1       	rjmp	.+784    	; 0x21f2 <func+0x35a>
	{
		count3 ++;
    1ee2:	80 91 6d 00 	lds	r24, 0x006D
    1ee6:	90 91 6e 00 	lds	r25, 0x006E
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	90 93 6e 00 	sts	0x006E, r25
    1ef0:	80 93 6d 00 	sts	0x006D, r24

		if(count3 ==1)
    1ef4:	80 91 6d 00 	lds	r24, 0x006D
    1ef8:	90 91 6e 00 	lds	r25, 0x006E
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	91 05       	cpc	r25, r1
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <func+0x6c>
    1f02:	0e c2       	rjmp	.+1052   	; 0x2320 <func+0x488>
		{
			/*Turn on led*/
			for(int i=0; i<5; i++)
    1f04:	1a ae       	std	Y+58, r1	; 0x3a
    1f06:	19 ae       	std	Y+57, r1	; 0x39
    1f08:	f3 c0       	rjmp	.+486    	; 0x20f0 <func+0x258>
			{
				mdio_setPinValue(PORTC, PIN3, HIGH);
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	68 e0       	ldi	r22, 0x08	; 8
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a8 ec       	ldi	r26, 0xC8	; 200
    1f1a:	b2 e4       	ldi	r27, 0x42	; 66
    1f1c:	8d ab       	std	Y+53, r24	; 0x35
    1f1e:	9e ab       	std	Y+54, r25	; 0x36
    1f20:	af ab       	std	Y+55, r26	; 0x37
    1f22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6d a9       	ldd	r22, Y+53	; 0x35
    1f26:	7e a9       	ldd	r23, Y+54	; 0x36
    1f28:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	89 ab       	std	Y+49, r24	; 0x31
    1f3e:	9a ab       	std	Y+50, r25	; 0x32
    1f40:	ab ab       	std	Y+51, r26	; 0x33
    1f42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f44:	69 a9       	ldd	r22, Y+49	; 0x31
    1f46:	7a a9       	ldd	r23, Y+50	; 0x32
    1f48:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <func+0xce>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <func+0x14c>
	else if (__tmp > 65535)
    1f66:	69 a9       	ldd	r22, Y+49	; 0x31
    1f68:	7a a9       	ldd	r23, Y+50	; 0x32
    1f6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <func+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f80:	7e a9       	ldd	r23, Y+54	; 0x36
    1f82:	8f a9       	ldd	r24, Y+55	; 0x37
    1f84:	98 ad       	ldd	r25, Y+56	; 0x38
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	98 ab       	std	Y+48, r25	; 0x30
    1fa4:	8f a7       	std	Y+47, r24	; 0x2f
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <func+0x12e>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e a7       	std	Y+46, r25	; 0x2e
    1fae:	8d a7       	std	Y+45, r24	; 0x2d
    1fb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <func+0x11c>
    1fb8:	9e a7       	std	Y+46, r25	; 0x2e
    1fba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	98 ab       	std	Y+48, r25	; 0x30
    1fc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <func+0x110>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <func+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	98 ab       	std	Y+48, r25	; 0x30
    1fe2:	8f a7       	std	Y+47, r24	; 0x2f
    1fe4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe8:	9c a7       	std	Y+44, r25	; 0x2c
    1fea:	8b a7       	std	Y+43, r24	; 0x2b
    1fec:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fee:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <func+0x158>
    1ff4:	9c a7       	std	Y+44, r25	; 0x2c
    1ff6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(100);
				mdio_setPinValue(PORTC, PIN3, LOW);
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	68 e0       	ldi	r22, 0x08	; 8
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a8 ec       	ldi	r26, 0xC8	; 200
    2008:	b2 e4       	ldi	r27, 0x42	; 66
    200a:	8f a3       	std	Y+39, r24	; 0x27
    200c:	98 a7       	std	Y+40, r25	; 0x28
    200e:	a9 a7       	std	Y+41, r26	; 0x29
    2010:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	6f a1       	ldd	r22, Y+39	; 0x27
    2014:	78 a5       	ldd	r23, Y+40	; 0x28
    2016:	89 a5       	ldd	r24, Y+41	; 0x29
    2018:	9a a5       	ldd	r25, Y+42	; 0x2a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a ef       	ldi	r20, 0xFA	; 250
    2020:	54 e4       	ldi	r21, 0x44	; 68
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8b a3       	std	Y+35, r24	; 0x23
    202c:	9c a3       	std	Y+36, r25	; 0x24
    202e:	ad a3       	std	Y+37, r26	; 0x25
    2030:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2032:	6b a1       	ldd	r22, Y+35	; 0x23
    2034:	7c a1       	ldd	r23, Y+36	; 0x24
    2036:	8d a1       	ldd	r24, Y+37	; 0x25
    2038:	9e a1       	ldd	r25, Y+38	; 0x26
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	2c f4       	brge	.+10     	; 0x2054 <func+0x1bc>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <func+0x23a>
	else if (__tmp > 65535)
    2054:	6b a1       	ldd	r22, Y+35	; 0x23
    2056:	7c a1       	ldd	r23, Y+36	; 0x24
    2058:	8d a1       	ldd	r24, Y+37	; 0x25
    205a:	9e a1       	ldd	r25, Y+38	; 0x26
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	4c f5       	brge	.+82     	; 0x20be <func+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	6f a1       	ldd	r22, Y+39	; 0x27
    206e:	78 a5       	ldd	r23, Y+40	; 0x28
    2070:	89 a5       	ldd	r24, Y+41	; 0x29
    2072:	9a a5       	ldd	r25, Y+42	; 0x2a
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e2       	ldi	r20, 0x20	; 32
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9a a3       	std	Y+34, r25	; 0x22
    2092:	89 a3       	std	Y+33, r24	; 0x21
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <func+0x21c>
    2096:	88 ec       	ldi	r24, 0xC8	; 200
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	98 a3       	std	Y+32, r25	; 0x20
    209c:	8f 8f       	std	Y+31, r24	; 0x1f
    209e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a0:	98 a1       	ldd	r25, Y+32	; 0x20
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <func+0x20a>
    20a6:	98 a3       	std	Y+32, r25	; 0x20
    20a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9a a3       	std	Y+34, r25	; 0x22
    20b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	89 a1       	ldd	r24, Y+33	; 0x21
    20b6:	9a a1       	ldd	r25, Y+34	; 0x22
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f7       	brne	.-38     	; 0x2096 <func+0x1fe>
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <func+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20be:	6b a1       	ldd	r22, Y+35	; 0x23
    20c0:	7c a1       	ldd	r23, Y+36	; 0x24
    20c2:	8d a1       	ldd	r24, Y+37	; 0x25
    20c4:	9e a1       	ldd	r25, Y+38	; 0x26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9a a3       	std	Y+34, r25	; 0x22
    20d0:	89 a3       	std	Y+33, r24	; 0x21
    20d2:	89 a1       	ldd	r24, Y+33	; 0x21
    20d4:	9a a1       	ldd	r25, Y+34	; 0x22
    20d6:	9e 8f       	std	Y+30, r25	; 0x1e
    20d8:	8d 8f       	std	Y+29, r24	; 0x1d
    20da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <func+0x246>
    20e2:	9e 8f       	std	Y+30, r25	; 0x1e
    20e4:	8d 8f       	std	Y+29, r24	; 0x1d
		count3 ++;

		if(count3 ==1)
		{
			/*Turn on led*/
			for(int i=0; i<5; i++)
    20e6:	89 ad       	ldd	r24, Y+57	; 0x39
    20e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	9a af       	std	Y+58, r25	; 0x3a
    20ee:	89 af       	std	Y+57, r24	; 0x39
    20f0:	89 ad       	ldd	r24, Y+57	; 0x39
    20f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    20f4:	85 30       	cpi	r24, 0x05	; 5
    20f6:	91 05       	cpc	r25, r1
    20f8:	0c f4       	brge	.+2      	; 0x20fc <func+0x264>
    20fa:	07 cf       	rjmp	.-498    	; 0x1f0a <func+0x72>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	aa e7       	ldi	r26, 0x7A	; 122
    2102:	b4 e4       	ldi	r27, 0x44	; 68
    2104:	89 8f       	std	Y+25, r24	; 0x19
    2106:	9a 8f       	std	Y+26, r25	; 0x1a
    2108:	ab 8f       	std	Y+27, r26	; 0x1b
    210a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	69 8d       	ldd	r22, Y+25	; 0x19
    210e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a ef       	ldi	r20, 0xFA	; 250
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8d 8b       	std	Y+21, r24	; 0x15
    2126:	9e 8b       	std	Y+22, r25	; 0x16
    2128:	af 8b       	std	Y+23, r26	; 0x17
    212a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    212c:	6d 89       	ldd	r22, Y+21	; 0x15
    212e:	7e 89       	ldd	r23, Y+22	; 0x16
    2130:	8f 89       	ldd	r24, Y+23	; 0x17
    2132:	98 8d       	ldd	r25, Y+24	; 0x18
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <func+0x2b6>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <func+0x334>
	else if (__tmp > 65535)
    214e:	6d 89       	ldd	r22, Y+21	; 0x15
    2150:	7e 89       	ldd	r23, Y+22	; 0x16
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <func+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	69 8d       	ldd	r22, Y+25	; 0x19
    2168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <func+0x316>
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9a 8b       	std	Y+18, r25	; 0x12
    2196:	89 8b       	std	Y+17, r24	; 0x11
    2198:	89 89       	ldd	r24, Y+17	; 0x11
    219a:	9a 89       	ldd	r25, Y+18	; 0x12
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <func+0x304>
    21a0:	9a 8b       	std	Y+18, r25	; 0x12
    21a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9c 8b       	std	Y+20, r25	; 0x14
    21ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <func+0x2f8>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <func+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ba:	7e 89       	ldd	r23, Y+22	; 0x16
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	98 8d       	ldd	r25, Y+24	; 0x18
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	98 8b       	std	Y+16, r25	; 0x10
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	98 89       	ldd	r25, Y+16	; 0x10
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <func+0x340>
    21dc:	98 8b       	std	Y+16, r25	; 0x10
    21de:	8f 87       	std	Y+15, r24	; 0x0f
				mdio_setPinValue(PORTC, PIN3, LOW);
				_delay_ms(100);
			}
			_delay_ms(1000);
			/*open railway*/
			 forward();
    21e0:	0e 94 40 0a 	call	0x1480	; 0x1480 <forward>

			/*Turn on Buzzer */
			 seven_segg();
    21e4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <seven_segg>
			 count1 =0;
    21e8:	10 92 72 00 	sts	0x0072, r1
    21ec:	10 92 71 00 	sts	0x0071, r1
    21f0:	97 c0       	rjmp	.+302    	; 0x2320 <func+0x488>
		}
	}
	else if(count2 ==1000 && flag==0)
    21f2:	80 91 6f 00 	lds	r24, 0x006F
    21f6:	90 91 70 00 	lds	r25, 0x0070
    21fa:	23 e0       	ldi	r18, 0x03	; 3
    21fc:	88 3e       	cpi	r24, 0xE8	; 232
    21fe:	92 07       	cpc	r25, r18
    2200:	09 f0       	breq	.+2      	; 0x2204 <func+0x36c>
    2202:	8e c0       	rjmp	.+284    	; 0x2320 <func+0x488>
    2204:	80 91 6a 00 	lds	r24, 0x006A
    2208:	88 23       	and	r24, r24
    220a:	09 f0       	breq	.+2      	; 0x220e <func+0x376>
    220c:	89 c0       	rjmp	.+274    	; 0x2320 <func+0x488>
	{
		/*turn off led and Buzzer*/
		mdio_setPinValue(PORTD, PIN7,LOW);
    220e:	84 e0       	ldi	r24, 0x04	; 4
    2210:	60 e8       	ldi	r22, 0x80	; 128
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
		mdio_setPinValue(PORTC, PIN3, LOW);
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	68 e0       	ldi	r22, 0x08	; 8
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	aa e7       	ldi	r26, 0x7A	; 122
    2228:	b4 e4       	ldi	r27, 0x44	; 68
    222a:	8b 87       	std	Y+11, r24	; 0x0b
    222c:	9c 87       	std	Y+12, r25	; 0x0c
    222e:	ad 87       	std	Y+13, r26	; 0x0d
    2230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	6b 85       	ldd	r22, Y+11	; 0x0b
    2234:	7c 85       	ldd	r23, Y+12	; 0x0c
    2236:	8d 85       	ldd	r24, Y+13	; 0x0d
    2238:	9e 85       	ldd	r25, Y+14	; 0x0e
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8f 83       	std	Y+7, r24	; 0x07
    224c:	98 87       	std	Y+8, r25	; 0x08
    224e:	a9 87       	std	Y+9, r26	; 0x09
    2250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <func+0x3dc>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <func+0x45a>
	else if (__tmp > 65535)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <func+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <func+0x43c>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <func+0x42a>
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <func+0x41e>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <func+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <func+0x466>
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);
		/*close railway*/
		reverse();
    2306:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <reverse>

		 count3 =0;
    230a:	10 92 6e 00 	sts	0x006E, r1
    230e:	10 92 6d 00 	sts	0x006D, r1
		 count2 =0;
    2312:	10 92 70 00 	sts	0x0070, r1
    2316:	10 92 6f 00 	sts	0x006F, r1
flag=1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 6a 00 	sts	0x006A, r24
	}

}
    2320:	ea 96       	adiw	r28, 0x3a	; 58
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <main>:


int main(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	61 97       	sbiw	r28, 0x11	; 17
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
	 flag=0;
    2346:	10 92 6a 00 	sts	0x006A, r1
	/*local variable for UART*/
	u8_t TX =0;
    234a:	19 8a       	std	Y+17, r1	; 0x11

	/*local variable for ADC*/
    u16_t x =0;
    234c:	18 8a       	std	Y+16, r1	; 0x10
    234e:	1f 86       	std	Y+15, r1	; 0x0f

    /*initialize 7SEG*/
    h7seg_first_init();
    2350:	0e 94 a3 05 	call	0xb46	; 0xb46 <h7seg_first_init>
    h7seg_second_init();
    2354:	0e 94 df 05 	call	0xbbe	; 0xbbe <h7seg_second_init>

    /*initialize UART*/
     MUART_Init();
    2358:	0e 94 bb 09 	call	0x1376	; 0x1376 <MUART_Init>
     MUART_Send_Data(TX);
    235c:	89 89       	ldd	r24, Y+17	; 0x11
    235e:	0e 94 02 0a 	call	0x1404	; 0x1404 <MUART_Send_Data>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a6 e9       	ldi	r26, 0x96	; 150
    2368:	b2 e4       	ldi	r27, 0x42	; 66
    236a:	8b 87       	std	Y+11, r24	; 0x0b
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	ad 87       	std	Y+13, r26	; 0x0d
    2370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a ef       	ldi	r20, 0xFA	; 250
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <main+0x82>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <main+0x100>
	else if (__tmp > 65535)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <main+0xe2>
    23f6:	88 ec       	ldi	r24, 0xC8	; 200
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <main+0xd0>
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <main+0xc4>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <main+0x10c>
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(75);

	/*initialize Stepper Motor*/
	stepper_init();
    2446:	0e 94 2f 0a 	call	0x145e	; 0x145e <stepper_init>

	/*initialize ADC and LDR*/
	mdio_setPinStatus(PORTA , PIN0 , INPUT_FLOAT );
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	42 e0       	ldi	r20, 0x02	; 2
    2450:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>
	mdio_setPinStatus(PORTD , PIN6 , OUTPUT);
    2454:	84 e0       	ldi	r24, 0x04	; 4
    2456:	60 e4       	ldi	r22, 0x40	; 64
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>
	mdio_setPinValue(PORTD, PIN6, LOW);
    245e:	84 e0       	ldi	r24, 0x04	; 4
    2460:	60 e4       	ldi	r22, 0x40	; 64
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
	madc_init();
    2468:	0e 94 1b 06 	call	0xc36	; 0xc36 <madc_init>

	/*initialize red-led*/
	mdio_setPinStatus(PORTC, PIN3,OUTPUT);
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	68 e0       	ldi	r22, 0x08	; 8
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>
	mdio_setPinValue(PORTC,PIN3, LOW);
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	68 e0       	ldi	r22, 0x08	; 8
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>

	/*initialize Buzzer*/
	mdio_setPinStatus(PORTD, PIN7,OUTPUT);
    2480:	84 e0       	ldi	r24, 0x04	; 4
    2482:	60 e8       	ldi	r22, 0x80	; 128
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 89 06 	call	0xd12	; 0xd12 <mdio_setPinStatus>
	mdio_setPinValue(PORTD,PIN7, LOW);
    248a:	84 e0       	ldi	r24, 0x04	; 4
    248c:	60 e8       	ldi	r22, 0x80	; 128
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>

	/*TIMER0*/

		MTIMER0_CallBack(func);
    2494:	8c e4       	ldi	r24, 0x4C	; 76
    2496:	9f e0       	ldi	r25, 0x0F	; 15
    2498:	0e 94 76 09 	call	0x12ec	; 0x12ec <MTIMER0_CallBack>


	MTIMER0_VidInit();
    249c:	0e 94 41 09 	call	0x1282	; 0x1282 <MTIMER0_VidInit>
    MGIE_VidEnableGIE();
    24a0:	0e 94 25 09 	call	0x124a	; 0x124a <MGIE_VidEnableGIE>



       while(1)
		      {
		    	  x = madc_ReadAnalogPolling(0);
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 53 06 	call	0xca6	; 0xca6 <madc_ReadAnalogPolling>
    24ac:	98 8b       	std	Y+16, r25	; 0x10
    24ae:	8f 87       	std	Y+15, r24	; 0x0f
		    	  x = x * 5 /1023 ;
    24b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    24b2:	38 89       	ldd	r19, Y+16	; 0x10
    24b4:	c9 01       	movw	r24, r18
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	2f ef       	ldi	r18, 0xFF	; 255
    24c4:	33 e0       	ldi	r19, 0x03	; 3
    24c6:	b9 01       	movw	r22, r18
    24c8:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__udivmodhi4>
    24cc:	cb 01       	movw	r24, r22
    24ce:	98 8b       	std	Y+16, r25	; 0x10
    24d0:	8f 87       	std	Y+15, r24	; 0x0f

					  if(x < 3)
    24d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d4:	98 89       	ldd	r25, Y+16	; 0x10
    24d6:	83 30       	cpi	r24, 0x03	; 3
    24d8:	91 05       	cpc	r25, r1
    24da:	30 f4       	brcc	.+12     	; 0x24e8 <main+0x1b6>
					  {
						  mdio_setPinValue(PORTD, PIN6, LOW);
    24dc:	84 e0       	ldi	r24, 0x04	; 4
    24de:	60 e4       	ldi	r22, 0x40	; 64
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    24e6:	de cf       	rjmp	.-68     	; 0x24a4 <main+0x172>
					  }
					  else if (x>=3)
    24e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ea:	98 89       	ldd	r25, Y+16	; 0x10
    24ec:	83 30       	cpi	r24, 0x03	; 3
    24ee:	91 05       	cpc	r25, r1
    24f0:	c8 f2       	brcs	.-78     	; 0x24a4 <main+0x172>
					  {
						  mdio_setPinValue(PORTD, PIN6, HIGH);
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	60 e4       	ldi	r22, 0x40	; 64
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 b0 07 	call	0xf60	; 0xf60 <mdio_setPinValue>
    24fc:	d3 cf       	rjmp	.-90     	; 0x24a4 <main+0x172>

000024fe <__udivmodhi4>:
    24fe:	aa 1b       	sub	r26, r26
    2500:	bb 1b       	sub	r27, r27
    2502:	51 e1       	ldi	r21, 0x11	; 17
    2504:	07 c0       	rjmp	.+14     	; 0x2514 <__udivmodhi4_ep>

00002506 <__udivmodhi4_loop>:
    2506:	aa 1f       	adc	r26, r26
    2508:	bb 1f       	adc	r27, r27
    250a:	a6 17       	cp	r26, r22
    250c:	b7 07       	cpc	r27, r23
    250e:	10 f0       	brcs	.+4      	; 0x2514 <__udivmodhi4_ep>
    2510:	a6 1b       	sub	r26, r22
    2512:	b7 0b       	sbc	r27, r23

00002514 <__udivmodhi4_ep>:
    2514:	88 1f       	adc	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	5a 95       	dec	r21
    251a:	a9 f7       	brne	.-22     	; 0x2506 <__udivmodhi4_loop>
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	08 95       	ret

00002526 <__prologue_saves__>:
    2526:	2f 92       	push	r2
    2528:	3f 92       	push	r3
    252a:	4f 92       	push	r4
    252c:	5f 92       	push	r5
    252e:	6f 92       	push	r6
    2530:	7f 92       	push	r7
    2532:	8f 92       	push	r8
    2534:	9f 92       	push	r9
    2536:	af 92       	push	r10
    2538:	bf 92       	push	r11
    253a:	cf 92       	push	r12
    253c:	df 92       	push	r13
    253e:	ef 92       	push	r14
    2540:	ff 92       	push	r15
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	ca 1b       	sub	r28, r26
    2550:	db 0b       	sbc	r29, r27
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	09 94       	ijmp

0000255e <__epilogue_restores__>:
    255e:	2a 88       	ldd	r2, Y+18	; 0x12
    2560:	39 88       	ldd	r3, Y+17	; 0x11
    2562:	48 88       	ldd	r4, Y+16	; 0x10
    2564:	5f 84       	ldd	r5, Y+15	; 0x0f
    2566:	6e 84       	ldd	r6, Y+14	; 0x0e
    2568:	7d 84       	ldd	r7, Y+13	; 0x0d
    256a:	8c 84       	ldd	r8, Y+12	; 0x0c
    256c:	9b 84       	ldd	r9, Y+11	; 0x0b
    256e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2570:	b9 84       	ldd	r11, Y+9	; 0x09
    2572:	c8 84       	ldd	r12, Y+8	; 0x08
    2574:	df 80       	ldd	r13, Y+7	; 0x07
    2576:	ee 80       	ldd	r14, Y+6	; 0x06
    2578:	fd 80       	ldd	r15, Y+5	; 0x05
    257a:	0c 81       	ldd	r16, Y+4	; 0x04
    257c:	1b 81       	ldd	r17, Y+3	; 0x03
    257e:	aa 81       	ldd	r26, Y+2	; 0x02
    2580:	b9 81       	ldd	r27, Y+1	; 0x01
    2582:	ce 0f       	add	r28, r30
    2584:	d1 1d       	adc	r29, r1
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	ed 01       	movw	r28, r26
    2592:	08 95       	ret

00002594 <_exit>:
    2594:	f8 94       	cli

00002596 <__stop_program>:
    2596:	ff cf       	rjmp	.-2      	; 0x2596 <__stop_program>
